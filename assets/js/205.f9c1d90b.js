(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{614:function(e,n,r){"use strict";r.r(n);var t=r(0),o=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("ol",[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：资源驱动类、工具类、单例工厂类都需要注意。")])]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。")])]),e._v(" "),n("blockquote",[n("p",[e._v('正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给\nwhatFeatureOfGroup\npublic class UserThreadFactory implements ThreadFactory {\nprivate final String namePrefix;\nprivate final AtomicInteger nextId = new AtomicInteger(1);\n// 定义线程组名称，在利用 jstack 来排查问题时，非常有帮助\nUserThreadFactory(String whatFeatureOfGroup) {\nnamePrefix = "From UserThreadFactory\'s " + whatFeatureOfGroup + "-Worker-";\n}\n@Override\npublic Thread newThread(Runnable task) {\nString name = namePrefix + nextId.getAndIncrement();\nThread thread = new Thread(null, task, name, 0, false);\nSystem.out.println(thread.getName());\nreturn thread;\n}\n}')])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。\n如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。")])]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这\n样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：Executors 返回的线程池对象的弊端如下："),n("br"),e._v("\n1） FixedThreadPool 和 SingleThreadPool："),n("br"),e._v("\n允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。"),n("br"),e._v("\n2） CachedThreadPool："),n("br"),e._v("\n允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。")])]),e._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，\n必须加锁，或者使用 DateUtils 工具类。")])]),e._v(" "),n("blockquote",[n("p",[e._v("正例：注意线程安全，使用 DateUtils。亦推荐如下处理："),n("br"),e._v("\nprivate static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {"),n("br"),e._v("\n@Override"),n("br"),e._v("\nprotected DateFormat initialValue() {"),n("br"),e._v('\nreturn new SimpleDateFormat("yyyy-MM-dd");'),n("br"),e._v("\n}"),n("br"),e._v("\n};")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，\nDateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable\nthread-safe。")])]),e._v(" "),n("ol",{attrs:{start:"6"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 必须回收自定义的 ThreadLocal 变量，尤其在线程池场景下，线程经常会被复用，\n如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。\n尽量在代理中使用 try-finally 块进行回收。")])]),e._v(" "),n("blockquote",[n("p",[e._v("正例："),n("br"),e._v("\nobjectThreadLocal.set(userInfo);"),n("br"),e._v("\ntry {"),n("br"),e._v("\n// ..."),n("br"),e._v("\n} finally {"),n("br"),e._v("\nobjectThreadLocal.remove();"),n("br"),e._v("\n}")])]),e._v(" "),n("ol",{attrs:{start:"7"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。")])]),e._v(" "),n("ol",{attrs:{start:"8"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。")])]),e._v(" "),n("ol",{attrs:{start:"9"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代\n码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明一：如果在 lock 方法与 try 代码块之间的方法调用抛出异常，那么无法解锁，造成其它线程无法成功\n获取锁。"),n("br"),e._v("\n说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock\n对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出IllegalMonitorStateException 异常。"),n("br"),e._v("\n说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。\n正例："),n("br"),e._v("\nLock lock = new XxxLock();"),n("br"),e._v("\n// ..."),n("br"),e._v("\nlock.lock();"),n("br"),e._v("\ntry {"),n("br"),e._v("\ndoSomething();"),n("br"),e._v("\ndoOthers();"),n("br"),e._v("\n} finally {"),n("br"),e._v("\nlock.unlock();"),n("br"),e._v("\n}"),n("br"),e._v("\n反例："),n("br"),e._v("\nLock lock = new XxxLock();"),n("br"),e._v("\n// ..."),n("br"),e._v("\ntry {"),n("br"),e._v("\n// 如果此处抛出异常，则直接执行 finally 代码块"),n("br"),e._v("\ndoSomething();"),n("br"),e._v("\n// 无论加锁是否成功，finally 代码块都会执行"),n("br"),e._v("\nlock.lock();"),n("br"),e._v("\ndoOthers();"),n("br"),e._v("\n} finally {"),n("br"),e._v("\nlock.unlock();"),n("br"),e._v("\n}")])]),e._v(" "),n("ol",{attrs:{start:"10"}},[n("li",[n("em",[n("strong",[e._v("【强制】")])]),e._v(" 在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否\n持有锁。锁的释放规则与锁的阻塞等待方式相同。")])]),e._v(" "),n("blockquote",[n("p",[e._v("说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果\n当前线程不持有锁，则抛出 IllegalMonitorStateException 异常。"),n("br"),e._v("\n正例："),n("br"),e._v("\nLock lock = new XxxLock();"),n("br"),e._v("\n// ..."),n("br"),e._v("\nboolean isLocked = lock.tryLock();"),n("br"),e._v("\nif (isLocked) {"),n("br"),e._v("\ntry {"),n("br"),e._v("\ndoSomething();"),n("br"),e._v("\ndoOthers();"),n("br"),e._v("\n} finally {"),n("br"),e._v("\nlock.unlock();"),n("br"),e._v("\n}"),n("br"),e._v("\n}")])]),e._v(" "),n("p",[e._v("11.***【强制】*** 并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于\n3 次。")])]),e._v(" "),n("p",[e._v("12.***【强制】*** 多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。")]),e._v(" "),n("p",[e._v("13."),n("strong",[e._v("【推荐】")]),e._v(" 资金相关的金融敏感信息，使用悲观锁策略。")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策\n略有较复杂的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观\n锁更新。\n正例：悲观锁遵循一锁、二判、三更新、四释放的原则。")])]),e._v(" "),n("p",[e._v("14."),n("strong",[e._v("【推荐】")]),e._v(" 使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至\nawait 方法，直到超时才返回结果。")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。")])]),e._v(" "),n("p",[e._v("15."),n("strong",[e._v("【推荐】")]),e._v(" 避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed\n导致的性能下降。")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。"),n("br"),e._v("\n正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线\n程持有一个单独的 Random 实例。")])]),e._v(" "),n("p",[e._v("16."),n("strong",[e._v("【推荐】")]),e._v(' 通过双重检查锁（double-checked locking）（在并发场景下）存在延迟初始化的优化\n问题隐患（可参考 The "Double-Checked Locking is Broken" Declaration），推荐解决方案中较\n为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型，比如将 helper 的属\n性声明修改为'),n("code",[e._v("private volatile Helper helper = null;")]),e._v("。")]),e._v(" "),n("blockquote",[n("p",[e._v("正例：\npublic class LazyInitDemo {"),n("br"),e._v("\nprivate volatile Helper helper = null;"),n("br"),e._v("\npublic Helper getHelper() {"),n("br"),e._v("\nif (helper == null) {"),n("br"),e._v("\nsynchronized (this) {"),n("br"),e._v("\nif (helper == null) { helper = new Helper(); }"),n("br"),e._v("\n}"),n("br"),e._v("\n}"),n("br"),e._v("\nreturn helper;"),n("br"),e._v("\n}"),n("br"),e._v("\n// other methods and fields..."),n("br"),e._v("\n}")])]),e._v(" "),n("p",[e._v("17."),n("em",[e._v("【参考】")]),e._v(" volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但\n是如果多写，同样无法解决线程安全问题。")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：如果是 count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger();\ncount.addAndGet(1); 如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观\n锁的重试次数）。")])]),e._v(" "),n("p",[e._v("18."),n("em",[e._v("【参考】")]),e._v(" HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在\n开发过程中注意规避此风险。")]),e._v(" "),n("p",[e._v("19."),n("em",[e._v("【参考】")]),e._v(" ThreadLocal 对象使用 static 修饰，ThreadLocal 无法解决共享对象的更新问题。")]),e._v(" "),n("blockquote",[n("p",[e._v("说明：这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量，\n也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可\n以操控这个变量。")])])])}),[],!1,null,null,null);n.default=o.exports}}]);