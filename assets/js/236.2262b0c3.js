(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{713:function(t,n,s){"use strict";s.r(n);var e=s(0),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ol",[n("li",[n("em",[n("strong",[t._v("【强制】")])]),t._v(" 不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。")])]),t._v(" "),n("blockquote",[n("p",[t._v('反例：\n// 本例中，开发者 A 定义了缓存的 key，然后开发者 B 使用缓存时少了下划线，即 key 是"Id#taobao"+tradeId，导致出现故障'),n("br"),t._v('\nString key = "Id#taobao_" + tradeId;'),n("br"),t._v("\ncache.put(key, value);")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("em",[n("strong",[t._v("【强制】")])]),t._v(" 在 long 或者 Long 赋值时，数值后使用大写字母 L，不能是小写字母 l，小写容易跟数字混淆，造成误解。")])]),t._v(" "),n("blockquote",[n("p",[t._v("说明：Long a = 2l; 写的是数字的 21，还是 Long 型的 2？")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("strong",[t._v("【推荐】")]),t._v(" 不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。")])]),t._v(" "),n("blockquote",[n("p",[t._v("说明：大而全的常量类，杂乱无章，使用查找功能才能定位到修改的常量，不利于理解，也不利于维护。"),n("br"),t._v("\n正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 SystemConfigConsts 下。")])]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[n("strong",[t._v("【推荐】")]),t._v(" 常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。")]),t._v(" "),n("li",[t._v("跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。")]),t._v(" "),n("li",[t._v("应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。")])]),t._v(" "),n("blockquote",[n("p",[t._v("反例：易懂变量也要统一定义成应用内共享常量，两位工程师在两个类中分别定义了“YES”的变量："),n("br"),t._v('\n类 A 中：public static final String YES = "yes";'),n("br"),t._v('\n类 B 中：public static final String YES = "y";'),n("br"),t._v("\nA.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[t._v("子工程内部共享常量：即在当前子工程的 constant 目录下。")])]),t._v(" "),n("li",[n("p",[t._v("包内共享常量：即在当前包下单独的 constant 目录下。")])]),t._v(" "),n("li",[n("p",[t._v("类内共享常量：直接在类内部 private static final 定义。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("【推荐】")]),t._v(" 如果变量值仅在一个固定范围内变化用 enum 类型来定义。")])])]),t._v(" "),n("blockquote",[n("p",[t._v("说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。"),n("br"),t._v("\n正例：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public enum SeasonEnum {    \n SPRING(1), SUMMER(2), AUTUMN(3), WINTER(4);    \n private int seq;   \n SeasonEnum(int seq) {  \n  this.seq = seq;   \n  } \n  public int getSeq() { \n  return seq;   \n  } \n }  \n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);