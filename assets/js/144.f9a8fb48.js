(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{620:function(t,s,n){"use strict";n.r(s);var a=n(0),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[t._v("#")]),t._v(" 标识符")]),t._v(" "),s("ul",[s("li",[t._v("第一个字符必须是字母表中字母或下划线 _ 。")]),t._v(" "),s("li",[t._v("标识符的其他的部分由字母、数字和下划线组成。")]),t._v(" "),s("li",[t._v("标识符对大小写敏感。")])]),t._v(" "),s("h2",{attrs:{id:"python保留字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python保留字"}},[t._v("#")]),t._v(" python保留字")]),t._v(" "),s("p",[t._v("保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/11/20201118201712.png",alt:"image-20201118201712577"}})]),t._v(" "),s("h2",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/usr/bin/python3\n \n# 第一个注释\nprint ("Hello, Python!") # 第二个注释\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Hello, Python!\n")])])]),s("p",[t._v("多行注释可以用多个 "),s("strong",[t._v("#")]),t._v(" 号，还有 "),s("strong",[t._v("'''")]),t._v(" 和 "),s("strong",[t._v('"""')]),t._v("：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/usr/bin/python3\n \n# 第一个注释\n# 第二个注释\n \n\'\'\'\n第三注释\n第四注释\n\'\'\'\n \n"""\n第五注释\n第六注释\n"""\nprint ("Hello, Python!")\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Hello, Python!\n")])])]),s("h2",{attrs:{id:"行与缩进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行与缩进"}},[t._v("#")]),t._v(" 行与缩进")]),t._v(" "),s("p",[t._v("python最具特色的就是使用缩进来表示代码块，不需要使用大括号 "),s("strong",[t._v("{}")]),t._v(" 。")]),t._v(" "),s("p",[t._v("缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('if True:\n    print ("True")\nelse:\n    print ("False")\n')])])]),s("h2",{attrs:{id:"多行语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多行语句"}},[t._v("#")]),t._v(" 多行语句")]),t._v(" "),s("p",[t._v("Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("total = item_one + \\\n        item_two + \\\n        item_three\n")])])]),s("p",[t._v("在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("total = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n")])])]),s("h2",{attrs:{id:"数字-number-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字-number-类型"}},[t._v("#")]),t._v(" 数字(Number)类型")]),t._v(" "),s("p",[t._v("python中数字有四种类型：整数、布尔型、浮点数和复数。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("int")]),t._v(" (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。")]),t._v(" "),s("li",[s("strong",[t._v("bool")]),t._v(" (布尔), 如 True。")]),t._v(" "),s("li",[s("strong",[t._v("float")]),t._v(" (浮点数), 如 1.23、3E-2")]),t._v(" "),s("li",[s("strong",[t._v("complex")]),t._v(" (复数), 如 1 + 2j、 1.1 + 2.2j")])]),t._v(" "),s("h2",{attrs:{id:"字符串-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串-string"}},[t._v("#")]),t._v(" 字符串(String)")]),t._v(" "),s("ul",[s("li",[t._v("python中单引号和双引号使用完全相同。")]),t._v(" "),s("li",[t._v("使用三引号('''或\"\"\")可以指定一个多行字符串。")]),t._v(" "),s("li",[t._v("转义符 ''")]),t._v(" "),s("li",[t._v('反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r"this is a line with \\n" 则\\n会显示，并不是换行。')]),t._v(" "),s("li",[t._v('按字面意义级联字符串，如"this " "is " "string"会被自动转换为this is string。')]),t._v(" "),s("li",[t._v("字符串可以用 + 运算符连接在一起，用 * 运算符重复。")]),t._v(" "),s("li",[t._v("Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。")]),t._v(" "),s("li",[t._v("Python中的字符串不能改变。")]),t._v(" "),s("li",[t._v("Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。")]),t._v(" "),s("li",[t._v("字符串的截取的语法格式如下："),s("strong",[t._v("变量[头下标:尾下标:步长]")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/python3\n \nstr='Runoob'\n \nprint(str)                 # 输出字符串\nprint(str[0:-1])           # 输出第一个到倒数第二个的所有字符\nprint(str[0])              # 输出字符串第一个字符\nprint(str[2:5])            # 输出从第三个开始到第五个的字符\nprint(str[2:])             # 输出从第三个开始后的所有字符\nprint(str[1:5:2])          # 输出从第二个开始到第五个且每隔两个的字符\nprint(str * 2)             # 输出字符串两次\nprint(str + '你好')         # 连接字符串\n \nprint('------------------------------')\n \nprint('hello\\nrunoob')      # 使用反斜杠(\\)+n转义特殊字符\nprint(r'hello\\nrunoob')     # 在字符串前面添加一个 r，表示原始字符串，不会发生转义\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Runoob\nRunoo\nR\nnoo\nnoob\nuo\nRunoobRunoob\nRunoob你好\n------------------------------\nhello\nrunoob\nhello\\nrunoob\n")])])]),s("h2",{attrs:{id:"空行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[t._v("#")]),t._v(" 空行")]),t._v(" "),s("p",[t._v("函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。")]),t._v(" "),s("p",[t._v("空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。")]),t._v(" "),s("p",[t._v("**记住：**空行也是程序代码的一部分。")]),t._v(" "),s("h2",{attrs:{id:"等待用户输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#等待用户输入"}},[t._v("#")]),t._v(" 等待用户输入")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/usr/bin/python3\n \ninput("\\n\\n按下 enter 键后退出。")\n')])])]),s("h2",{attrs:{id:"同一行显示多条语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同一行显示多条语句"}},[t._v("#")]),t._v(" 同一行显示多条语句")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/python3\n \nimport sys; x = 'runoob'; sys.stdout.write(x + '\\n')\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("runoob\n")])])]),s("h2",{attrs:{id:"多个语句构成代码组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个语句构成代码组"}},[t._v("#")]),t._v(" 多个语句构成代码组")]),t._v(" "),s("p",[t._v("缩进相同的一组语句构成一个代码块，我们称之代码组。")]),t._v(" "),s("p",[t._v("像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。")]),t._v(" "),s("p",[t._v("我们将首行及后面的代码组称为一个子句(clause)。")]),t._v(" "),s("p",[t._v("如下实例：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("if expression : \n   suite\nelif expression : \n   suite \nelse : \n   suite\n")])])]),s("h2",{attrs:{id:"print-输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#print-输出"}},[t._v("#")]),t._v(" Print 输出")]),t._v(" "),s("p",[t._v("print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 "),s("strong",[t._v('end=""')]),t._v("：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/usr/bin/python3\n \nx="a"\ny="b"\n# 换行输出\nprint( x )\nprint( y )\n \nprint(\'---------\')\n# 不换行输出\nprint( x, end=" " )\nprint( y, end=" " )\nprint()\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("a\nb\n---------\na b\n")])])]),s("h2",{attrs:{id:"import-与-from-import"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-与-from-import"}},[t._v("#")]),t._v(" import 与 from...import")]),t._v(" "),s("p",[t._v("在 python 用 "),s("strong",[t._v("import")]),t._v(" 或者 "),s("strong",[t._v("from...import")]),t._v(" 来导入相应的模块。")]),t._v(" "),s("p",[t._v("将整个模块(somemodule)导入，格式为： "),s("strong",[t._v("import somemodule")])]),t._v(" "),s("p",[t._v("从某个模块中导入某个函数,格式为： "),s("strong",[t._v("from somemodule import somefunction")])]),t._v(" "),s("p",[t._v("从某个模块中导入多个函数,格式为： "),s("strong",[t._v("from somemodule import firstfunc, secondfunc, thirdfunc")])]),t._v(" "),s("p",[t._v("将某个模块中的全部函数导入，格式为： "),s("strong",[t._v("from somemodule import *")])]),t._v(" "),s("p",[t._v("导入sys模块:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import sys\nprint('================Python import mode==========================')\nprint ('命令行参数为:')\nfor i in sys.argv:\n    print (i)\nprint ('\\n python 路径为',sys.path)\n")])])]),s("p",[t._v("导入 sys 模块的 argv,path 成员")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("from sys import argv,path  #  导入特定的成员\n \nprint('================python from import===================================')\nprint('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path\n")])])]),s("h2",{attrs:{id:"命令行参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令行参数"}},[t._v("#")]),t._v(" 命令行参数")]),t._v(" "),s("p",[t._v("很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ python -h\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-c cmd : program passed in as string (terminates option list)\n-d     : debug output from parser (also PYTHONDEBUG=x)\n-E     : ignore environment variables (such as PYTHONPATH)\n-h     : print this help message and exit\n\n[ etc. ]\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);