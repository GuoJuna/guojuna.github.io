(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{567:function(t,n,a){"use strict";a.r(n);var s=a(0),o=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("Boxx"),t._v(" "),n("h2",{attrs:{id:"springbootapplication注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication注解"}},[t._v("#")]),t._v(" @SpringBootApplication注解")]),t._v(" "),n("p",[t._v("SpringBoot为何一个标注有@SpringBootApplication注解的启动类通过执行一个简单的run方法就能实现SpringBoot大量Starter的自动配置呢？ 其实SpringBoot的自动配置就跟@SpringBootApplication这个注解有关，我们先来看下其这个注解的源码：")]),t._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootConfiguration")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableAutoConfiguration")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ComponentScan")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("excludeFilters "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\t\t"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CUSTOM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypeExcludeFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Filter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CUSTOM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationExcludeFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringBootApplication")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略非关键代码")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("@SpringBootApplication标注了很多注解，我们可以看到其中跟SpringBoot自动配置有关的注解就有一个即@EnableAutoConfiguration，因此，可以肯定的是SpringBoot的自动配置肯定跟@EnableAutoConfiguration息息相关(其中@ComponentScan注解的excludeFilters属性也有一个类AutoConfigurationExcludeFilter,这个类跟自动配置也有点关系，但不是我们关注的重点)。 现在我们来打开@EnableAutoConfiguration注解的源码：")]),t._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TYPE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNTIME")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Documented")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Inherited")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AutoConfigurationPackage")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AutoConfigurationImportSelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnableAutoConfiguration")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENABLED_OVERRIDE_PROPERTY")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spring.boot.enableautoconfiguration"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("exclude")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("excludeName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("看到@EnableAutoConfiguration注解又标有@AutoConfigurationPackage和@Import(AutoConfigurationImportSelector.class)两个注解，顾名思义，@AutoConfigurationPackage注解肯定跟自动配置的包有关，而AutoConfigurationImportSelector则是跟SpringBoot的自动配置选择导入有关（Spring中的ImportSelector是用来导入配置类的，通常是基于某些条件注解@ConditionalOnXxxx来决定是否导入某个配置类）。")]),t._v(" "),n("p",[t._v("因此，可以看出AutoConfigurationImportSelector类是我们本篇的重点，因为SpringBoot的自动配置肯定有一个配置类，而这个配置类的导入则需要靠AutoConfigurationImportSelector这个哥们来实现")]),t._v(" "),n("h2",{attrs:{id:"寻找springboot自动配置实现逻辑的入口方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#寻找springboot自动配置实现逻辑的入口方法"}},[t._v("#")]),t._v(" 寻找SpringBoot自动配置实现逻辑的入口方法？")]),t._v(" "),n("p",[n("code",[t._v("AutoConfigurationImportSelector")]),t._v("的相关类图如下:")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200728143325.png",alt:"image-20200728143325625"}})]),t._v(" "),n("p",[t._v("可以看到"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("重点是实现了"),n("code",[t._v("DeferredImportSelector")]),t._v("接口和各种"),n("code",[t._v("Aware")]),t._v("接口，然后"),n("code",[t._v("DeferredImportSelector")]),t._v("接口又继承了"),n("code",[t._v("ImportSelector")]),t._v("接口。")]),t._v(" "),n("p",[t._v("自然而然的，我们会去关注"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("复写"),n("code",[t._v("DeferredImportSelector")]),t._v("接口的实现方法"),n("code",[t._v("selectImports")]),t._v("方法，因为"),n("code",[t._v("selectImports")]),t._v("方法跟导入自动配置类有关，而这个方法往往是程序执行的入口方法。经过调试发现"),n("code",[t._v("selectImports")]),t._v("方法很具有迷惑性，"),n("code",[t._v("selectImports")]),t._v("方法跟自动配置相关的逻辑有点关系，但实质关系不大。")]),t._v(" "),n("p",[t._v("最简单的方法就是在"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("类的每个方法都打上断点，然后调试看先执行到哪个方法。但是我们可以不这么做，我们回想下，自定义一个"),n("code",[t._v("Starter")]),t._v("的时候我们是不是要在"),n("code",[t._v("spring.factories")]),t._v("配置文件中配置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("EnableAutoConfiguration=XxxAutoConfiguration\n")])])]),n("p",[t._v("​\t因此可以推断，SpringBoot的自动配置原理肯定跟从"),n("code",[t._v("spring.factories")]),t._v("配置文件中加载自动配置类有关，于是结合"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("的方法注释，我们找到了"),n("code",[t._v("getAutoConfigurationEntry")]),t._v("方法。于是我们在这个方法里面打上一个断点，此时通过调用栈帧来看下更上层的入口方法在哪里，然后我们再从跟自动配置相关的更上层的入口方法开始分析。")]),t._v(" "),n("p",[t._v("调试发现自动配置逻辑相关的入口方法在"),n("code",[t._v("DeferredImportSelectorGrouping")]),t._v("类的"),n("code",[t._v("getImports")]),t._v("方法处，因此我们就从"),n("code",[t._v("DeferredImportSelectorGrouping")]),t._v("类的"),n("code",[t._v("getImports")]),t._v("方法来开始分析SpringBoot的自动配置源码好了。")]),t._v(" "),n("h2",{attrs:{id:"分析springboot自动配置原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分析springboot自动配置原理"}},[t._v("#")]),t._v(" 分析SpringBoot自动配置原理")]),t._v(" "),n("p",[t._v("既然找到"),n("code",[t._v("ConfigurationClassParser.getImports()方法")]),t._v("是自动配置相关的入口方法，那么下面我们就来真正分析SpringBoot自动配置的源码了。")]),t._v(" "),n("p",[t._v("先看一下"),n("code",[t._v("getImports")]),t._v("方法代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// ConfigurationClassParser.Java\npublic Iterable<Group.Entry> getImports() {\n    // 遍历DeferredImportSelectorHolder对象集合deferredImports，deferredImports集合装了各种ImportSelector，当然这里装的是AutoConfigurationImportSelector\n    for (DeferredImportSelectorHolder deferredImport : this.deferredImports) {\n    \t// 【1】，利用AutoConfigurationGroup的process方法来处理自动配置的相关逻辑，决定导入哪些配置类（这个是我们分析的重点，自动配置的逻辑全在这了）\n    \tthis.group.process(deferredImport.getConfigurationClass().getMetadata(),\n    \t\t\tdeferredImport.getImportSelector());\n    }\n    // 【2】，经过上面的处理后，然后再进行选择导入哪些配置类\n    return this.group.selectImports();\n}\n")])])]),n("p",[t._v("标"),n("code",[t._v("【1】")]),t._v("处的的代码是我们分析的"),n("strong",[t._v("重中之重")]),t._v("，自动配置的相关的绝大部分逻辑全在这里了，将在"),n("font",{attrs:{color:"blue"}},[t._v("4.1 分析自动配置的主要逻辑")]),t._v("深入分析。那么"),n("code",[t._v("this.group.process(deferredImport.getConfigurationClass().getMetadata(), \t\tdeferredImport.getImportSelector())")]),t._v("；主要做的事情就是在"),n("code",[t._v("this.group")]),t._v("即"),n("code",[t._v("AutoConfigurationGroup")]),t._v("对象的"),n("code",[t._v("process")]),t._v("方法中，传入的"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("对象来选择一些符合条件的自动配置类，过滤掉一些不符合条件的自动配置类，就是这么个事情，无他。")],1),t._v(" "),n("p",[t._v("注：")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("AutoConfigurationGroup")]),t._v("：是"),n("code",[t._v("AutoConfigurationImportSelector")]),t._v("的内部类，主要用来处理自动配置相关的逻辑，拥有"),n("code",[t._v("process")]),t._v("和"),n("code",[t._v("selectImports")]),t._v("方法，然后拥有"),n("code",[t._v("entries")]),t._v("和"),n("code",[t._v("autoConfigurationEntries")]),t._v("集合属性，这两个集合分别存储被处理后的符合条件的自动配置类，我们知道这些就足够了；")]),t._v(" "),n("li",[n("code",[t._v("AutoConfigurationImportSelector")]),t._v("：承担自动配置的绝大部分逻辑，负责选择一些符合条件的自动配置类；")]),t._v(" "),n("li",[n("code",[t._v("metadata")]),t._v(":标注在SpringBoot启动类上的"),n("code",[t._v("@SpringBootApplication")]),t._v("注解元数据")])])],1)}),[],!1,null,null,null);n.default=o.exports}}]);