(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{565:function(o,t,n){"use strict";n.r(t);var r=n(0),p=Object(r.a)({},(function(){var o=this,t=o._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("Boxx"),o._v(" "),t("h2",{attrs:{id:"模块结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块结构"}},[o._v("#")]),o._v(" 模块结构")]),o._v(" "),t("p",[o._v("主要有以下四个模块：\n"),t("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200727180420.png",alt:"image-20200727180420139"}})]),o._v(" "),t("ul",[t("li",[o._v("spring-boot-project：整个SpringBoot框架全部功能在这个模块实现，SpringBoot项目95%的代码都在这里实现，源码总共有25万行左右。")]),o._v(" "),t("li",[o._v("Spring-boot-samples：这个是SpringBoot给小伙伴们赠送的福利，里面包含了各种各样使用SpringBoot的简单demo，我们调试阅读源码的时候可以充分利用该模块。")]),o._v(" "),t("li",[o._v("Spring-boot-sample-invoker：这个模块应该是跟sample模块有关，注意根pom.xml中有这么一句话：Samples are built via the invoker plugin，该模块无代码。")]),o._v(" "),t("li",[o._v("Spring-boot-tests：这个模块SpringBoot的测试模块，跟部署测试和集成测试有关。")])]),o._v(" "),t("h2",{attrs:{id:"spring-boot-project源码模块详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-project源码模块详解"}},[o._v("#")]),o._v(" spring-boot-project源码模块详解")]),o._v(" "),t("p",[o._v("Spring-boot-project共14个项目,项目结构如图")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200727180713.png",alt:"image-20200727180713174"}})]),o._v(" "),t("ul",[t("li",[t("p",[o._v("spring-boot-parent\n这个模块没有代码，是spring-boot模块的父项目，被其他子模块继承。")])]),o._v(" "),t("li",[t("p",[o._v("spring-boot\n这个模块是SpringBoot项目的核心，可以说一些基础核心的功能都在这里实现，为SpringBoot的其他模块组件功能提供了支持，主要包括以下核心功能：")])])]),o._v(" "),t("blockquote",[t("p",[o._v("SpringApplication类，这个是SpringBoot的启动类，提供了一个静态的run方法来启动程序，该类主要用来创建并且刷新Spring容器ApplicationContext.\n支持选择不同的容器比如Tomcat,Jetty等来作为应用的嵌入容器，这个是SpringBoot的新特性之一。\n外部配置支持，这个指的是我们执行Java -jar xxx.jar命令时可以带一些参数，比如执行Java -jar demo.jar --server.port=8888来将应用端口修改为8888.\n该模块内置了一些SpringBoot启动时的生命周期事件和一些容器初始化器(ApplicationContext initializers)，来执行一些SpringBoot启动时的初始化逻辑。")])]),o._v(" "),t("ul",[t("li",[o._v("spring-boot-autoconfigure\n这个模块跟SpringBoot的自动配置有关，也是SpringBoot的新特性之一。比如SpringBoot能基于类路径来自动配置某个项目模块，自动配置最为关键的注解是@EnableAutoConfiguration,这个注解能触发Spring上下文的自动配置。另外一个重要的注解是@Conditional。")])]),o._v(" "),t("blockquote",[t("p",[o._v("举个栗子，若HSQLDB在项目的类路径中，且我们没有配置任何其他数据库的连接，此时自动配置就会自动根据类路径来创建相应的bean。")])]),o._v(" "),t("blockquote",[t("p",[o._v("除了根据类路径来进行自动配置外，还有根据容器中是否存在某个bean等方式来进行自动配置，这里不会进入到具体细节中。")])]),o._v(" "),t("ul",[t("li",[o._v("spring-boot-starters\n这个模块是跟SpringBoot的起步依赖有关，也是SpringBoot的新特性之一。SpringBoot通过提供众多起步依赖降低项目依赖的复杂度。起步依赖其实就是利用maven项目模型将其他相关的依赖给聚合起来，里面各种依赖的版本号都给定义好，避免用户在引入依赖时出现各种版本冲突，方便了我们的使用。")])]),o._v(" "),t("blockquote",[t("p",[o._v("举个栗子，我们要用到activemq时，此时可以直接引入spring-boot-starter-activemq起步依赖即可，若SpringBoot官网或第三方组织没有提供相应的SpringBoot起步依赖时，此时我们可以进行定制自己的起步依赖。")])]),o._v(" "),t("blockquote",[t("p",[o._v("注意，该模块没有代码，主要是通过maven的pom.xml来组织各种依赖。")])]),o._v(" "),t("ul",[t("li",[o._v("spring-boot-cli\nSpring Boot CLI是一个命令行工具，如果您想使用Spring快速开发，可以使用它。它允许您运行Groovy脚本，这意味着您有一个熟悉的类似Java的语法，而没有那么多样板代码。您还可以引导一个新项目或编写自己的命令。")]),o._v(" "),t("li",[o._v("spring-boot-actuator\n这个跟SpringBoot的监控有关，也是SpringBoot的新特性之一。可以通过HTTP端点或JMX等来管理和监控应用。审计、运行状况和度量收集可以自动应用到应用程序。这个监控模块是开箱即用的，提供了一系列端点包括HealthEndpoint, EnvironmentEndpoint和BeansEndpoint等端点。")]),o._v(" "),t("li",[o._v("spring-boot-actuator-autoconfigure\n这个模块为监控模块提供自动配置的功能，通常也是根据类路径来进行配置。比如Micrometer存在于类路径中，那么将会自动配置MetricsEndpoint。")]),o._v(" "),t("li",[o._v("spring-boot-test\n这个模式是spring-boot的跟测试有关的模块，包含了一些帮助我们测试的核心类和注解（比如@SpringBootTest）。")]),o._v(" "),t("li",[o._v("spring-boot-dependencies\n这个模块也没有代码，主要是定义了一些SpringBoot的maven相关的一些依赖及其版本。")]),o._v(" "),t("li",[o._v("spring-boot-devtools\n这个模块跟SpringBoot的热部署有关，即修改代码后无需重启应用即生效。")]),o._v(" "),t("li",[o._v("spring-boot-docs\n这个模块应该是跟文档相关的模块。")]),o._v(" "),t("li",[o._v("spring-boot-properties-migrator\n看到 migrator 这个单词，估计就是跟项目迁移有关，没有去细 究。")]),o._v(" "),t("li",[o._v("spring-boot-test-autoconfigure\n这个模块一看就是跟SpringBoot的测试的自动配置有关。")]),o._v(" "),t("li",[o._v("spring-boot-tools\n这个模块一看就是SpringBoot的工具相关的模块，提供了加载，maven插件,metadata和后置处理相关的支持。")])]),o._v(" "),t("h2",{attrs:{id:"项目结构图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目结构图"}},[o._v("#")]),o._v(" 项目结构图")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200727181834.png",alt:"image-20200727181834180"}})]),o._v(" "),t("h2",{attrs:{id:"springboot模块之间的pom关系详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot模块之间的pom关系详解"}},[o._v("#")]),o._v(" SpringBoot模块之间的pom关系详解")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200727182057.png",alt:"image-20200727182057735"}})]),o._v(" "),t("ul",[t("li",[o._v("spring-boot-build(pom.xml)是项目的根pom，其子pom有spring-boot-project(pom.xml)和spring-boot-dependencies(pom.xml)；")]),o._v(" "),t("li",[o._v("spring-boot-dependencies(pom.xml)主要定义了SpringBoot项目的各种依赖及其版本，其子pom有spring-boot-parent(pom.xml)和spring-boot-starter-parent(pom.xml)；")]),o._v(" "),t("li",[o._v("spring-boot-project(pom.xml)起到聚合module的作用，其子模块并不继承于它，而是继承于spring-boot-parent(pom.xml)；")]),o._v(" "),t("li",[o._v("spring-boot-parent(pom.xml)是spring-boot-project(pom.xml)的子module，但继承的父pom为spring-boot-dependencies(pom.xml)，其定义了一些properties等相关的东西。其子pom为spring-boot-project(pom.xml)的子module（注意除去spring-boot-dependencies(pom.xml)），比如有spring-boot(pom.xml),spring-boot-starters(pom.xml)和spring-boot-actuator(pom.xml)等；")]),o._v(" "),t("li",[o._v("spring-boot-starters(pom.xml)是所有具体起步依赖的父pom，其子pom有spring-boot-starter-data-jdbc(pom.xml)和spring-boot-starter-data-redis(pom.xml)等。")]),o._v(" "),t("li",[o._v("spring-boot-starter-parent(pom.xml)，是我们的所有具体SpringBoot项目的父pom，比如SpringBoot自带的样例的spring-boot-samples(pom.xml)是继承于它的。")])])],1)}),[],!1,null,null,null);t.default=p.exports}}]);