(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{613:function(e,_,t){"use strict";t.r(_);var s=t(0),a=Object(s.a)({},(function(){var e=this,_=e._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"explain有什么用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#explain有什么用"}},[e._v("#")]),e._v(" Explain有什么用")]),e._v(" "),_("p",[e._v("当"),_("code",[e._v("Explain")]),e._v(" 与 "),_("code",[e._v("SQL")]),e._v("语句一起使用时，"),_("code",[e._v("MySQL")]),e._v(" 会显示来自优化器关于SQL执行的信息。也就是说，"),_("code",[e._v("MySQL")]),e._v("解释了它将如何处理该语句，包括如何连接表以及什么顺序连接表等。")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("表的加载顺序")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("sql")]),e._v(" 的查询类型")])]),e._v(" "),_("li",[_("p",[e._v("可能用到哪些索引，哪些索引又被实际使用")])]),e._v(" "),_("li",[_("p",[e._v("表与表之间的引用关系")])]),e._v(" "),_("li",[_("p",[e._v("一个表中有多少行被优化器查询 .....")])])]),e._v(" "),_("h2",{attrs:{id:"explain有哪些信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#explain有哪些信息"}},[e._v("#")]),e._v(" Explain有哪些信息")]),e._v(" "),_("p",[_("code",[e._v("Explain")]),e._v(" 执行计划包含字段信息如下：分别是 "),_("code",[e._v("id")]),e._v("、"),_("code",[e._v("select_type")]),e._v("、"),_("code",[e._v("table")]),e._v("、"),_("code",[e._v("partitions")]),e._v("、"),_("code",[e._v("type")]),e._v("、"),_("code",[e._v("possible_keys")]),e._v("、"),_("code",[e._v("key")]),e._v("、"),_("code",[e._v("key_len")]),e._v("、"),_("code",[e._v("ref")]),e._v("、"),_("code",[e._v("rows")]),e._v("、"),_("code",[e._v("filtered")]),e._v("、"),_("code",[e._v("Extra")]),e._v(" 12个字段。下边我们会结合具体的"),_("code",[e._v("SQL")]),e._v("示例，详细的解读每个字段以及每个字段中不同参数的含义，以下所有示例数据库版本为 "),_("code",[e._v("MySQL.5.7.17")]),e._v("。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("​```\nmysql> select version() from dual;  \n+------------+  \n| version()  |  \n+------------+  \n| 5.7.17-log |  \n+------------+  \n \n​```\n\n")])])]),_("p",[e._v("我们创建三张表 "),_("code",[e._v("one")]),e._v("、"),_("code",[e._v("two")]),e._v("、"),_("code",[e._v("three")]),e._v("，表之间的关系 "),_("code",[e._v("one.two_id = two.two_id AND two.three_id = three.three_id")]),e._v("。")]),e._v(" "),_("h2",{attrs:{id:"explain执行计划详解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#explain执行计划详解"}},[e._v("#")]),e._v(" Explain执行计划详解")]),e._v(" "),_("h3",{attrs:{id:"一、id"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、id"}},[e._v("#")]),e._v(" 一、id")]),e._v(" "),_("p",[_("code",[e._v("id：")]),e._v(" ：表示查询中执行select子句或者操作表的顺序，"),_("strong",[_("code",[e._v("id")]),e._v("的值越大，代表优先级越高，越先执行")]),e._v("。"),_("code",[e._v("id")]),e._v("大致会出现 3种情况：")]),e._v(" "),_("h5",{attrs:{id:"_1、id相同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、id相同"}},[e._v("#")]),e._v(" 1、"),_("code",[e._v("id")]),e._v("相同")]),e._v(" "),_("p",[e._v("看到三条记录的"),_("code",[e._v("id")]),e._v("都相同，可以理解成这三个表为一组，具有同样的优先级，执行顺序由上而下，具体顺序由优化器决定。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * FROM one o,two t, three r WHERE o.two_id = t.two_id AND t.three_id = r.three_id;  \n+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+------+----------+----------------------------------------------------+  \n| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                  | rows | filtered | Extra                                              |  \n+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+------+----------+----------------------------------------------------+  \n|  1 | SIMPLE      | o     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL                 |    2 |      100 | NULL                                               |  \n|  1 | SIMPLE      | t     | NULL       | ALL    | PRIMARY       | NULL    | NULL    | NULL                 |    2 |       50 | Using where; Using join buffer (Block Nested Loop) |  \n|  1 | SIMPLE      | r     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | xin-slave.t.three_id |    1 |      100 | NULL                                               |  \n+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+------+----------+----------------------------------------------------+  \n \n")])])]),_("h5",{attrs:{id:"_2、id不同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、id不同"}},[e._v("#")]),e._v(" 2、"),_("code",[e._v("id")]),e._v("不同")]),e._v(" "),_("p",[e._v("如果我们的 "),_("code",[e._v("SQL")]),e._v(" 中存在子查询，那么 "),_("code",[e._v("id")]),e._v("的序号会递增，"),_("code",[e._v("id")]),e._v("值越大优先级越高，越先被执行 。当三个表依次嵌套，发现最里层的子查询 "),_("code",[e._v("id")]),e._v("最大，最先执行。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN select * from one o where o.two_id = (select t.two_id from two t where t.three_id = (select r.three_id  from three r where r.three_name='我是第三表2'));  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+-------+-------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n|  1 | PRIMARY     | o     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |       50 | Using where |  \n|  2 | SUBQUERY    | t     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |       50 | Using where |  \n|  3 | SUBQUERY    | r     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |       50 | Using where |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n")])])]),_("h5",{attrs:{id:"_3、以上两种同时存在"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、以上两种同时存在"}},[e._v("#")]),e._v(" 3、以上两种同时存在")]),e._v(" "),_("p",[e._v("将上边的 "),_("code",[e._v("SQL")]),e._v(" 稍微修改一下，增加一个子查询，发现 "),_("code",[e._v("id")]),e._v("的以上两种同时存在。相同"),_("code",[e._v("id")]),e._v("划分为一组，这样就有三个组，同组的从上往下顺序执行，不同组 "),_("code",[e._v("id")]),e._v("值越大，优先级越高，越先执行。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql>  EXPLAIN select * from one o where o.two_id = (select t.two_id from two t where t.three_id = (select r.three_id  from three r where r.three_name='我是第三表2')) AND o.one_id in(select one_id from one where o.one_name=\"我是第一表2\");  \n+----+-------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+-------------+  \n| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                | rows | filtered | Extra       |  \n+----+-------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+-------------+  \n|  1 | PRIMARY     | o     | NULL       | ALL    | PRIMARY       | NULL    | NULL    | NULL               |    2 |       50 | Using where |  \n|  1 | PRIMARY     | one   | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | xin-slave.o.one_id |    1 |      100 | Using index |  \n|  2 | SUBQUERY    | t     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL               |    2 |       50 | Using where |  \n|  3 | SUBQUERY    | r     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL               |    2 |       50 | Using where |  \n+----+-------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+-------------+ \n")])])]),_("h3",{attrs:{id:"二、select-type"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、select-type"}},[e._v("#")]),e._v(" 二、select_type")]),e._v(" "),_("p",[_("code",[e._v("select_type")]),e._v("：表示 "),_("code",[e._v("select")]),e._v(" 查询的类型，主要是用于区分各种复杂的查询，例如："),_("code",[e._v("普通查询")]),e._v("、"),_("code",[e._v("联合查询")]),e._v("、"),_("code",[e._v("子查询")]),e._v("等。")]),e._v(" "),_("h5",{attrs:{id:"_1、simple"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、simple"}},[e._v("#")]),e._v(" 1、SIMPLE")]),e._v(" "),_("p",[_("code",[e._v("SIMPLE")]),e._v("：表示最简单的 select 查询语句，也就是在查询中不包含子查询或者 "),_("code",[e._v("union")]),e._v("交并差集等操作。")]),e._v(" "),_("h5",{attrs:{id:"_2、primary"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、primary"}},[e._v("#")]),e._v(" 2、PRIMARY")]),e._v(" "),_("p",[_("code",[e._v("PRIMARY")]),e._v("：当查询语句中包含任何复杂的子部分，最外层查询则被标记为"),_("code",[e._v("PRIMARY")]),e._v("。")]),e._v(" "),_("h5",{attrs:{id:"_3、subquery"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、subquery"}},[e._v("#")]),e._v(" 3、SUBQUERY")]),e._v(" "),_("p",[_("code",[e._v("SUBQUERY")]),e._v("：当 "),_("code",[e._v("select")]),e._v(" 或 "),_("code",[e._v("where")]),e._v(" 列表中包含了子查询，该子查询被标记为："),_("code",[e._v("SUBQUERY")]),e._v(" 。")]),e._v(" "),_("h5",{attrs:{id:"_4、derived"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、derived"}},[e._v("#")]),e._v(" 4、DERIVED")]),e._v(" "),_("p",[_("code",[e._v("DERIVED")]),e._v("：表示包含在"),_("code",[e._v("from")]),e._v("子句中的子查询的select，在我们的 "),_("code",[e._v("from")]),e._v(" 列表中包含的子查询会被标记为"),_("code",[e._v("derived")]),e._v(" 。")]),e._v(" "),_("h5",{attrs:{id:"_5、union"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、union"}},[e._v("#")]),e._v(" 5、UNION")]),e._v(" "),_("p",[_("code",[e._v("UNION")]),e._v("：如果"),_("code",[e._v("union")]),e._v("后边又出现的"),_("code",[e._v("select")]),e._v(" 语句，则会被标记为"),_("code",[e._v("union")]),e._v("；若 "),_("code",[e._v("union")]),e._v(" 包含在 "),_("code",[e._v("from")]),e._v(" 子句的子查询中，外层 "),_("code",[e._v("select")]),e._v(" 将被标记为 "),_("code",[e._v("derived")]),e._v("。")]),e._v(" "),_("h5",{attrs:{id:"_6、union-result"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、union-result"}},[e._v("#")]),e._v(" 6、UNION RESULT")]),e._v(" "),_("p",[_("code",[e._v("UNION RESULT")]),e._v("：代表从"),_("code",[e._v("union")]),e._v("的临时表中读取数据，而"),_("code",[e._v("table")]),e._v("列的"),_("code",[e._v("&lt;union1,4&gt;")]),e._v("表示用第一个和第四个"),_("code",[e._v("select")]),e._v("的结果进行"),_("code",[e._v("union")]),e._v("操作。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN select t.two_name, ( select one.one_id from one) o from (select two_id,two_name from two where two_name ='') t  union (select r.three_name,r.three_id from three r);  \n  \n+------+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+  \n| id   | select_type  | table      | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra           |  \n+------+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+  \n|    1 | PRIMARY      | two        | NULL       | ALL   | NULL          | NULL    | NULL    | NULL |    2 |       50 | Using where     |  \n|    2 | SUBQUERY     | one        | NULL       | index | NULL          | PRIMARY | 4       | NULL |    2 |      100 | Using index     |  \n|    4 | UNION        | r          | NULL       | ALL   | NULL          | NULL    | NULL    | NULL |    2 |      100 | NULL            |  \n| NULL | UNION RESULT | <union1,4> | NULL       | ALL   | NULL          | NULL    | NULL    | NULL | NULL | NULL     | Using temporary |  \n+------+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+  \n\n")])])]),_("h3",{attrs:{id:"三、table"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、table"}},[e._v("#")]),e._v(" 三、table")]),e._v(" "),_("p",[e._v("查询的表名，并不一定是真实存在的表，有别名显示别名，也可能为临时表，例如上边的"),_("code",[e._v("DERIVED")]),e._v("、 "),_("code",[e._v("&lt;union1,4&gt;")]),e._v("等。")]),e._v(" "),_("h3",{attrs:{id:"四、partitions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、partitions"}},[e._v("#")]),e._v(" 四、partitions")]),e._v(" "),_("p",[e._v("查询时匹配到的分区信息，对于非分区表值为"),_("code",[e._v("NULL")]),e._v("，当查询的是分区表时，"),_("code",[e._v("partitions")]),e._v("显示分区表命中的分区情况。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from three where three_id=1;  \n+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+  \n| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+  \n|  1 | SIMPLE      | three | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |      100 | NULL  |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+  \n\n")])])]),_("h3",{attrs:{id:"五、type"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、type"}},[e._v("#")]),e._v(" 五、type")]),e._v(" "),_("p",[_("code",[e._v("type")]),e._v("：查询使用了何种类型，它在 "),_("code",[e._v("SQL")]),e._v("优化中是一个非常重要的指标，以下性能从好到坏依次是："),_("code",[e._v("system")]),e._v("  > "),_("code",[e._v("const")]),e._v(" > "),_("code",[e._v("eq_ref")]),e._v(" > "),_("code",[e._v("ref")]),e._v("  > "),_("code",[e._v("ref_or_null")]),e._v(" > "),_("code",[e._v("index_merge")]),e._v(" > "),_("code",[e._v("unique_subquery")]),e._v(" > "),_("code",[e._v("index_subquery")]),e._v(" > "),_("code",[e._v("range")]),e._v(" > "),_("code",[e._v("index")]),e._v(" > "),_("code",[e._v("ALL")])]),e._v(" "),_("h5",{attrs:{id:"_1、system"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、system"}},[e._v("#")]),e._v(" 1、system")]),e._v(" "),_("p",[_("code",[e._v("system")]),e._v("：当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘IO，速度非常快。")]),e._v(" "),_("h5",{attrs:{id:"_2、const"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、const"}},[e._v("#")]),e._v(" 2、const")]),e._v(" "),_("p",[_("code",[e._v("const")]),e._v("：表示查询时命中 "),_("code",[e._v("primary key")]),e._v(" 主键或者 "),_("code",[e._v("unique")]),e._v(" 唯一索引，或者被连接的部分是一个常量("),_("code",[e._v("const")]),e._v(")值。这类扫描效率极高，返回数据量少，速度非常快。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from three where three_id=1;  \n+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+  \n| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+  \n|  1 | SIMPLE      | three | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |      100 | NULL  |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+  \n \n\n")])])]),_("h5",{attrs:{id:"_3、eq-ref"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、eq-ref"}},[e._v("#")]),e._v(" 3、eq_ref")]),e._v(" "),_("p",[_("code",[e._v("eq_ref")]),e._v("：查询时命中主键"),_("code",[e._v("primary key")]),e._v(" 或者 "),_("code",[e._v("unique key")]),e._v("索引， "),_("code",[e._v("type")]),e._v(" 就是 "),_("code",[e._v("eq_ref")]),e._v("。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN select o.one_name from one o ,two t where o.one_id = t.two_id ;   \n+----+-------------+-------+------------+--------+---------------+----------+---------+--------------------+------+----------+-------------+  \n| id | select_type | table | partitions | type   | possible_keys | key      | key_len | ref                | rows | filtered | Extra       |  \n+----+-------------+-------+------------+--------+---------------+----------+---------+--------------------+------+----------+-------------+  \n|  1 | SIMPLE      | o     | NULL       | index  | PRIMARY       | idx_name | 768     | NULL               |    2 |      100 | Using index |  \n|  1 | SIMPLE      | t     | NULL       | eq_ref | PRIMARY       | PRIMARY  | 4       | xin-slave.o.one_id |    1 |      100 | Using index |  \n+----+-------------+-------+------------+--------+---------------+----------+---------+--------------------+------+----------+-------------+   \n\n")])])]),_("h5",{attrs:{id:"_4、ref"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、ref"}},[e._v("#")]),e._v(" 4、ref")]),e._v(" "),_("p",[_("code",[e._v("ref")]),e._v("：区别于"),_("code",[e._v("eq_ref")]),e._v(" ，"),_("code",[e._v("ref")]),e._v("表示使用非唯一性索引，会找到很多个符合条件的行。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('mysql> select o.one_id from one o where o.one_name = "xin" ;   \n+--------+  \n| one_id |  \n+--------+  \n|      1 |  \n|      3 |  \n+--------+\n \nmysql> EXPLAIN select o.one_id from one o where o.one_name = "xin" ;   \n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+  \n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |  \n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+  \n|  1 | SIMPLE      | o     | NULL       | ref  | idx_name      | idx_name | 768     | const |    1 |      100 | Using index |  \n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\n\n')])])]),_("h5",{attrs:{id:"_5、ref-or-null"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、ref-or-null"}},[e._v("#")]),e._v(" 5、ref_or_null")]),e._v(" "),_("p",[_("code",[e._v("ref_or_null")]),e._v("：这种连接类型类似于 ref，区别在于 "),_("code",[e._v("MySQL")]),e._v("会额外搜索包含"),_("code",[e._v("NULL")]),e._v("值的行。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v('mysql> EXPLAIN select o.one_id from one o where o.one_name = "xin" OR o.one_name IS NULL;   \n+----+-------------+-------+------------+-------------+---------------+----------+---------+-------+------+----------+--------------------------+  \n| id | select_type | table | partitions | type        | possible_keys | key      | key_len | ref   | rows | filtered | Extra                    |  \n+----+-------------+-------+------------+-------------+---------------+----------+---------+-------+------+----------+--------------------------+  \n|  1 | SIMPLE      | o     | NULL       | ref_or_null | idx_name      | idx_name | 768     | const |    3 |      100 | Using where; Using index |  \n+----+-------------+-------+------------+-------------+---------------+----------+---------+-------+------+----------+--------------------------+\n\n')])])]),_("h5",{attrs:{id:"_6、index-merge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、index-merge"}},[e._v("#")]),e._v(" 6、index_merge")]),e._v(" "),_("p",[_("code",[e._v("index_merge")]),e._v("：使用了索引合并优化方法，查询使用了两个以上的索引。")]),e._v(" "),_("p",[e._v("下边示例中同时使用到主键"),_("code",[e._v("one_id")]),e._v(" 和 字段"),_("code",[e._v("one_name")]),e._v("的"),_("code",[e._v("idx_name")]),e._v(" 索引 。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN select * from one o where o.one_id >1 and o.one_name ='xin';   \n+----+-------------+-------+------------+-------------+------------------+------------------+---------+------+------+----------+------------------------------------------------+  \n| id | select_type | table | partitions | type        | possible_keys    | key              | key_len | ref  | rows | filtered | Extra                                          |  \n+----+-------------+-------+------------+-------------+------------------+------------------+---------+------+------+----------+------------------------------------------------+  \n|  1 | SIMPLE      | o     | NULL       | index_merge | PRIMARY,idx_name | idx_name,PRIMARY | 772,4   | NULL |    1 |      100 | Using intersect(idx_name,PRIMARY); Using where |  \n+----+-------------+-------+------------+-------------+------------------+------------------+---------+------+------+----------+------------------------------------------------+  \n\n")])])]),_("h5",{attrs:{id:"_7、unique-subquery"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、unique-subquery"}},[e._v("#")]),e._v(" 7、unique_subquery")]),e._v(" "),_("p",[_("code",[e._v("unique_subquery")]),e._v("：替换下面的 "),_("code",[e._v("IN")]),e._v("子查询，子查询返回不重复的集合。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("value IN (SELECT primary_key FROM single_table WHERE some_expr) \n\n")])])]),_("h5",{attrs:{id:"_8、index-subquery"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8、index-subquery"}},[e._v("#")]),e._v(" 8、index_subquery")]),e._v(" "),_("p",[_("code",[e._v("index_subquery")]),e._v("：区别于"),_("code",[e._v("unique_subquery")]),e._v("，用于非唯一索引，可以返回重复值。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("value IN (SELECT key_column FROM single_table WHERE some_expr)  \n\n")])])]),_("h5",{attrs:{id:"_9、range"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9、range"}},[e._v("#")]),e._v(" 9、range")]),e._v(" "),_("p",[_("code",[e._v("range")]),e._v("：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。在"),_("code",[e._v("where")]),e._v("语句中使用 "),_("code",[e._v("bettween...and")]),e._v("、"),_("code",[e._v("&lt;")]),e._v("、"),_("code",[e._v("&gt;")]),e._v("、"),_("code",[e._v("&lt;=")]),e._v("、"),_("code",[e._v("in")]),e._v(" 等条件查询 "),_("code",[e._v("type")]),e._v(" 都是 "),_("code",[e._v("range")]),e._v("。")]),e._v(" "),_("p",[e._v("举个栗子："),_("code",[e._v("three")]),e._v("表中"),_("code",[e._v("three_id")]),e._v("为唯一主键，"),_("code",[e._v("user_id")]),e._v("普通字段未建索引。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from three where three_id BETWEEN 2 AND 3;  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | three | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL |    1 |      100 | Using where |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n \n\n")])])]),_("p",[e._v("从结果中看到只有对设置了索引的字段，做范围检索 "),_("code",[e._v("type")]),e._v(" 才是 "),_("code",[e._v("range")]),e._v("。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from three where user_id BETWEEN 2 AND 3;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | three | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n\n")])])]),_("h5",{attrs:{id:"_10、index"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10、index"}},[e._v("#")]),e._v(" 10、index")]),e._v(" "),_("p",[_("code",[e._v("index")]),e._v("："),_("code",[e._v("Index")]),e._v(" 与"),_("code",[e._v("ALL")]),e._v(" 其实都是读全表，区别在于"),_("code",[e._v("index")]),e._v("是遍历索引树读取，而"),_("code",[e._v("ALL")]),e._v("是从硬盘中读取。")]),e._v(" "),_("p",[e._v("下边示例："),_("code",[e._v("three_id")]),e._v(" 为主键，不带 "),_("code",[e._v("where")]),e._v(" 条件全表查询 ，"),_("code",[e._v("type")]),e._v("结果为"),_("code",[e._v("index")]),e._v(" 。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT three_id from three ;  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | three | NULL       | index | NULL          | PRIMARY | 4       | NULL |    1 |      100 | Using index |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n\n")])])]),_("h5",{attrs:{id:"_11、all"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11、all"}},[e._v("#")]),e._v(" 11、ALL")]),e._v(" "),_("p",[_("code",[e._v("ALL")]),e._v("：将遍历全表以找到匹配的行，性能最差。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from two ;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n|  1 | SIMPLE      | two   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |      100 | NULL  |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n")])])]),_("h3",{attrs:{id:"六、possible-keys"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#六、possible-keys"}},[e._v("#")]),e._v(" 六、possible_keys")]),e._v(" "),_("p",[_("code",[e._v("possible_keys")]),e._v("：表示在"),_("code",[e._v("MySQL")]),e._v("中通过哪些索引，能让我们在表中找到想要的记录，一旦查询涉及到的某个字段上存在索引，则索引将被列出，"),_("strong",[e._v("但这个索引并不定一会是最终查询数据时所被用到的索引")]),e._v("。具体请参考上边的例子。")]),e._v(" "),_("h3",{attrs:{id:"七、key"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#七、key"}},[e._v("#")]),e._v(" 七、key")]),e._v(" "),_("p",[_("code",[e._v("key")]),e._v("：区别于"),_("code",[e._v("possible_keys")]),e._v("，key是查询中实际使用到的索引，若没有使用索引，显示为"),_("code",[e._v("NULL")]),e._v("。具体请参考上边的例子。")]),e._v(" "),_("p",[e._v("> 当 "),_("code",[e._v("type")]),e._v(" 为 "),_("code",[e._v("index_merge")]),e._v(" 时，可能会显示多个索引。")]),e._v(" "),_("h3",{attrs:{id:"八、key-len"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#八、key-len"}},[e._v("#")]),e._v(" 八、key_len")]),e._v(" "),_("p",[_("code",[e._v("key_len")]),e._v("：表示查询用到的索引长度（字节数），原则上长度越短越好 。")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("单列索引，那么需要将整个索引长度算进去；")])]),e._v(" "),_("li",[_("p",[e._v("多列索引，不是所有列都能用到，需要计算查询中实际用到的列。")])])]),e._v(" "),_("p",[e._v("> 注意："),_("code",[e._v("key_len")]),e._v("只计算"),_("code",[e._v("where")]),e._v("条件中用到的索引长度，而排序和分组即便是用到了索引，也不会计算到"),_("code",[e._v("key_len")]),e._v("中。")]),e._v(" "),_("h3",{attrs:{id:"九、ref"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#九、ref"}},[e._v("#")]),e._v(" 九、ref")]),e._v(" "),_("p",[_("code",[e._v("ref")]),e._v("：常见的有："),_("code",[e._v("const")]),e._v("，"),_("code",[e._v("func")]),e._v("，"),_("code",[e._v("null")]),e._v("，字段名。")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("当使用常量等值查询，显示"),_("code",[e._v("const")]),e._v("，")])]),e._v(" "),_("li",[_("p",[e._v("当关联查询时，会显示相应关联表的"),_("code",[e._v("关联字段")])])]),e._v(" "),_("li",[_("p",[e._v("如果查询条件使用了"),_("code",[e._v("表达式")]),e._v("、"),_("code",[e._v("函数")]),e._v("，或者条件列发生内部隐式转换，可能显示为"),_("code",[e._v("func")])])]),e._v(" "),_("li",[_("p",[e._v("其他情况"),_("code",[e._v("null")])])])]),e._v(" "),_("h3",{attrs:{id:"十、rows"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十、rows"}},[e._v("#")]),e._v(" 十、rows")]),e._v(" "),_("p",[_("code",[e._v("rows")]),e._v("：以表的统计信息和索引使用情况，估算要找到我们所需的记录，需要读取的行数。")]),e._v(" "),_("p",[e._v("这是评估"),_("code",[e._v("SQL")]),e._v(" 性能的一个比较重要的数据，"),_("code",[e._v("mysql")]),e._v("需要扫描的行数，很直观的显示 "),_("code",[e._v("SQL")]),e._v(" 性能的好坏，一般情况下 "),_("code",[e._v("rows")]),e._v(" 值越小越好。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from three;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n|  1 | SIMPLE      | three | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |      100 | NULL  |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n\n")])])]),_("h3",{attrs:{id:"十一、filtered"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十一、filtered"}},[e._v("#")]),e._v(" 十一、filtered")]),e._v(" "),_("p",[_("code",[e._v("filtered")]),e._v(" 这个是一个百分比的值，表里符合条件的记录数的百分比。简单点说，这个字段表示存储引擎返回的数据在经过过滤后，剩下满足条件的记录数量的比例。")]),e._v(" "),_("p",[e._v("在"),_("code",[e._v("MySQL.5.7")]),e._v("版本以前想要显示"),_("code",[e._v("filtered")]),e._v("需要使用"),_("code",[e._v("explain extended")]),e._v("命令。"),_("code",[e._v("MySQL.5.7")]),e._v("后，默认"),_("code",[e._v("explain")]),e._v("直接显示"),_("code",[e._v("partitions")]),e._v("和"),_("code",[e._v("filtered")]),e._v("的信息。")]),e._v(" "),_("h3",{attrs:{id:"十二、extra"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#十二、extra"}},[e._v("#")]),e._v(" 十二、Extra")]),e._v(" "),_("p",[_("code",[e._v("Extra")]),e._v(" ：不适合在其他列中显示的信息，"),_("code",[e._v("Explain")]),e._v(" 中的很多额外的信息会在 "),_("code",[e._v("Extra")]),e._v(" 字段显示。")]),e._v(" "),_("h5",{attrs:{id:"_1、using-index"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、using-index"}},[e._v("#")]),e._v(" 1、Using index")]),e._v(" "),_("p",[_("code",[e._v("Using index")]),e._v("：我们在相应的 "),_("code",[e._v("select")]),e._v(" 操作中使用了覆盖索引，通俗一点讲就是查询的列被索引覆盖，使用到覆盖索引查询速度会非常快，"),_("code",[e._v("SQl")]),e._v("优化中理想的状态。")]),e._v(" "),_("p",[e._v("什么又是覆盖索引?")]),e._v(" "),_("p",[e._v("一条 "),_("code",[e._v("SQL")]),e._v("只需要通过索引就可以返回，我们所需要查询的数据（一个或几个字段），而不必通过二级索引，查到主键之后再通过主键查询整行数据（"),_("code",[e._v("select *")]),e._v(" ）。")]),e._v(" "),_("p",[_("code",[e._v("one_id")]),e._v("表为主键")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_id from one ;  \n+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | one   | NULL       | index | NULL          | idx_two_id | 5       | NULL |    3 |      100 | Using index |  \n+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+ \n\n")])])]),_("p",[_("strong",[e._v("注意")]),e._v("：想要使用到覆盖索引，我们在 "),_("code",[e._v("select")]),e._v(" 时只取出需要的字段，不可"),_("code",[e._v("select *")]),e._v("，而且该字段建了索引。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT * from one ;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n|  1 | SIMPLE      | one   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |      100 | NULL  |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+  \n\n")])])]),_("h5",{attrs:{id:"_2、using-where"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、using-where"}},[e._v("#")]),e._v(" 2、Using where")]),e._v(" "),_("p",[_("code",[e._v("Using where")]),e._v("：查询时未找到可用的索引，进而通过"),_("code",[e._v("where")]),e._v("条件过滤获取所需数据，但要注意的是并不是所有带"),_("code",[e._v("where")]),e._v("语句的查询都会显示"),_("code",[e._v("Using where")]),e._v("。")]),e._v(" "),_("p",[e._v("下边示例"),_("code",[e._v("create_time")]),e._v(" 并未用到索引，"),_("code",[e._v("type")]),e._v(" 为 "),_("code",[e._v("ALL")]),e._v("，即"),_("code",[e._v("MySQL")]),e._v("通过全表扫描后再按"),_("code",[e._v("where")]),e._v("条件筛选数据。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_name from one where create_time ='2020-05-18';  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | one   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n\n")])])]),_("h5",{attrs:{id:"_3、using-temporary"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、using-temporary"}},[e._v("#")]),e._v(" 3、Using temporary")]),e._v(" "),_("p",[_("code",[e._v("Using temporary")]),e._v("：表示查询后结果需要使用临时表来存储，一般在排序或者分组查询时用到。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_name from one where one_id in (1,2) group by one_name;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | one   | NULL       | range| NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using temporary; Using filesort |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+ \n\n")])])]),_("h5",{attrs:{id:"_4、using-filesort"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、using-filesort"}},[e._v("#")]),e._v(" 4、Using filesort")]),e._v(" "),_("p",[_("code",[e._v("Using filesort")]),e._v("：表示无法利用索引完成的排序操作，也就是"),_("code",[e._v("ORDER BY")]),e._v("的字段没有索引，通常这样的SQL都是需要优化的。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_id from one  ORDER BY create_time;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+  \n|  1 | SIMPLE      | one   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |      100 | Using filesort |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+  \n\n")])])]),_("p",[e._v("如果"),_("code",[e._v("ORDER BY")]),e._v("字段有索引就会用到覆盖索引，相比执行速度快很多。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_id from one  ORDER BY one_id;  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+  \n|  1 | SIMPLE      | one   | NULL       | index | NULL          | PRIMARY | 4       | NULL |    3 |      100 | Using index |  \n+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+   \n\n")])])]),_("h5",{attrs:{id:"_5、using-join-buffer"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、using-join-buffer"}},[e._v("#")]),e._v(" 5、Using join buffer")]),e._v(" "),_("p",[_("code",[e._v("Using join buffer")]),e._v("：在我们联表查询的时候，如果表的连接条件没有用到索引，需要有一个连接缓冲区来存储中间结果。")]),e._v(" "),_("p",[e._v("先看一下有索引的情况：连接条件 "),_("code",[e._v("one_name")]),e._v(" 、"),_("code",[e._v("two_name")]),e._v(" 都用到索引。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_name from one o,two t where o.one_name = t.two_name;  \n+----+-------------+-------+------------+-------+---------------+----------+---------+----------------------+------+----------+--------------------------+  \n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref                  | rows | filtered | Extra                    |  \n+----+-------------+-------+------------+-------+---------------+----------+---------+----------------------+------+----------+--------------------------+  \n|  1 | SIMPLE      | o     | NULL       | index | idx_name      | idx_name | 768     | NULL                 |    3 |      100 | Using where; Using index |  \n|  1 | SIMPLE      | t     | NULL       | ref   | idx_name      | idx_name | 768     | xin-slave.o.one_name |    1 |      100 | Using index              |  \n+----+-------------+-------+------------+-------+---------------+----------+---------+----------------------+------+----------+--------------------------+ \n\n")])])]),_("p",[e._v("接下来删掉 连接条件 "),_("code",[e._v("one_name")]),e._v(" 、"),_("code",[e._v("two_name")]),e._v(" 的字段索引。发现"),_("code",[e._v("Extra")]),e._v(" 列变成 "),_("code",[e._v("Using join buffer")]),e._v("，"),_("code",[e._v("type")]),e._v("均为全表扫描，这也是"),_("code",[e._v("SQL")]),e._v("优化中需要注意的地方。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_name from one o,two t where o.one_name = t.two_name;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+  \n|  1 | SIMPLE      | t     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |      100 | NULL                                               |  \n|  1 | SIMPLE      | o     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+  \n")])])]),_("h5",{attrs:{id:"_6、impossible-where"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、impossible-where"}},[e._v("#")]),e._v(" 6、Impossible where")]),e._v(" "),_("p",[_("code",[e._v("Impossible where")]),e._v("：表示在我们用不太正确的"),_("code",[e._v("where")]),e._v("语句，导致没有符合条件的行。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN SELECT one_name from one WHERE 1=2;  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+  \n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL | NULL     | Impossible WHERE |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+  \n")])])]),_("h5",{attrs:{id:"_7、no-tables-used"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、no-tables-used"}},[e._v("#")]),e._v(" 7、No tables used")]),e._v(" "),_("p",[_("code",[e._v("No tables used")]),e._v("：我们的查询语句中没有"),_("code",[e._v("FROM")]),e._v("子句，或者有 "),_("code",[e._v("FROM DUAL")]),e._v("子句。")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("mysql> EXPLAIN select now();  \n+----+--------+-------+------------+------+---------------+----------+  \n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+  \n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL | NULL     | No tables used |  \n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+  \n\n")])])]),_("p",[_("code",[e._v("Extra")]),e._v("列的信息非常非常多，这里就不再一一列举了，详见 "),_("code",[e._v("MySQL")]),e._v("官方文档 ：https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_index_merge")]),e._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),_("p",[e._v("上边只是简单介绍了下 "),_("code",[e._v("Explain")]),e._v(" 执行计划各个列的含义，了解它不仅仅是要应付面试，在实际开发中也经常会用到。比如对慢"),_("code",[e._v("SQL")]),e._v("进行分析，如果连执行计划结果都不会看，那还谈什么"),_("code",[e._v("SQL")]),e._v("优化呢？")])])}),[],!1,null,null,null);_.default=a.exports}}]);