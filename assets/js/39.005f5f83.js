(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{505:function(t,n,a){t.exports=a.p+"assets/img/2023-08-03-springboot-starter-1691050164658.c658d939.png"},671:function(t,n,a){"use strict";a.r(n);var s=a(0),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"starter-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starter-简介"}},[t._v("#")]),t._v(" starter 简介")]),t._v(" "),n("p",[t._v("如果你所在的公司要开发一个共享的lib，或者如果你想要为开源世界做点贡献，你也许想要开发你自己的自定义的自动配置类以及你自己的starter pom。这些自动配置类虽然在一个单独的jar包中，但却依然能够被Spring Boot获取到。")]),t._v(" "),n("h2",{attrs:{id:"starter-开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#starter-开发"}},[t._v("#")]),t._v(" starter 开发")]),t._v(" "),n("h4",{attrs:{id:"_1-创建一个maven项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建一个maven项目"}},[t._v("#")]),t._v(" 1. 创建一个Maven项目")]),t._v(" "),n("p",[n("img",{attrs:{src:a(505),alt:""}})]),t._v(" "),n("h4",{attrs:{id:"_2-创建需要注入的类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建需要注入的类"}},[t._v("#")]),t._v(" 2. 创建需要注入的类")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hellospringbootstarter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloController")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"_3-配置spring-factories"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置spring-factories"}},[t._v("#")]),t._v(" 3. 配置spring.factories")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.example.hellospringbootstarter.HelloController\n")])])]),n("h4",{attrs:{id:"_4-修改maven构建插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-修改maven构建插件"}},[t._v("#")]),t._v(" 4. 修改maven构建插件")]),t._v(" "),n("p",[t._v("spring-boot-maven-plugin插件，会将依赖的jar包全部打包进去。该文件包含了所有的依赖和资源文件，可以直接在命令行或者传统的 Java Web 服务器上启动运行。这里需要打普通jar包")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n")])])]),n("h4",{attrs:{id:"_4-测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-测试"}},[t._v("#")]),t._v(" 4.测试")]),t._v(" "),n("ol",[n("li",[t._v("pom引入上面项目")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("        <dependency>\n            <groupId>com.example</groupId>\n            <artifactId>hello-spring-boot-starter</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("创建类打印Bean")])]),t._v(" "),n("div",{staticClass:"language-aidl extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package com.example2.hello2;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * 打印Spring容器所有的Bean名称\n */\n@Component\npublic class ApplicationContextBean implements ApplicationContextAware, InitializingBean {\n\n    public static ApplicationContext applicationContext;\n\n    /**\n     * 获取 ApplicationContext\n     *\n     * @param applicationContext\n     * @throws BeansException\n     */\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        ApplicationContextBean.applicationContext = applicationContext;\n    }\n\n    /**\n     * 打印IOC容器中所有的Bean名称\n     *\n     * @throws Exception\n     */\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        String[] names = applicationContext.getBeanDefinitionNames();\n        for (String name : names) {\n            System.out.println(">>>>>>" + name);\n        }\n        // 140\n        System.out.println("------\\nBean 总计:" + applicationContext.getBeanDefinitionCount());\n    }\n}\n')])])]),n("h2",{attrs:{id:"根据条件注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#根据条件注入"}},[t._v("#")]),t._v(" 根据条件注入")]),t._v(" "),n("p",[t._v("pom文件添加依赖")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-autoconfigure</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n")])])]),n("p",[t._v("类上添加常用添加注解:")]),t._v(" "),n("ul",[n("li",[t._v("@ConditionalOnBean:容器内存在指定Bean")]),t._v(" "),n("li",[t._v("@ConditionalOnClass:容器内存在指定Class")]),t._v(" "),n("li",[t._v("@ConditionalOnExpression:基于SpEL表达式作为判断条件")]),t._v(" "),n("li",[t._v("@ConditionalOnJava:基于JVM版本作为判断条件")]),t._v(" "),n("li",[t._v("@ConditionalOnJndi:在JNDI存在时查找指定的位置")]),t._v(" "),n("li",[t._v("@ConditionalOnMissingBean:容器内不存在指定Bean")]),t._v(" "),n("li",[t._v("@ConditionalOnMissingClass:容器内不存在指定Class")]),t._v(" "),n("li",[t._v("@ConditionalOnNotWebApplication:当前项目不是Web项目的条件")]),t._v(" "),n("li",[t._v("@ConditionalOnProperty:指定的属性是否有指定的值")]),t._v(" "),n("li",[t._v("@ConditionalOnResource:类路径是否有指定的资源")]),t._v(" "),n("li",[t._v("@ConditionalOnSingleCandidate:当指定Bean在Springloc容器内只有一个,或者虽然有多个但是指定首选的Bean")]),t._v(" "),n("li",[t._v("@ConditionalOnWebApplication:当前项目是Web项目的条件")])])])}),[],!1,null,null,null);n.default=e.exports}}]);