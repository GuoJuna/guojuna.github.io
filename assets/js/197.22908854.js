(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{606:function(t,e,o){"use strict";o.r(e);var v=o(0),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ol",[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。")])]),t._v(" "),e("blockquote",[e("p",[t._v("反例："),e("em",[t._v("name / "),e("em",[e("em",[t._v("name / $name / name")]),t._v(" / name$ / name")])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。")])]),t._v(" "),e("blockquote",[e("p",[t._v("说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，纯拼音命名方式更要避免采用。"),e("br"),t._v("\n正例：ali / alibaba / taobao / cainiao/ aliyun/ youku / hangzhou 等国际通用的名称，可视同英文。"),e("br"),t._v("\n反例：DaZhePromotion [打折] / getPingfenByName() [评分] / String fw[福娃] / int 某变量 = 3")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 代码和注释中都要避免使用任何语言的种族歧视性词语。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：日本人 / 印度人 / blockList / allowList / secondary"),e("br"),t._v("\n反例：RIBENGUIZI / Asan / blackList / whiteList / slave")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 类名使用 UpperCamelCase 风格，但以下情形例外：DO / BO / DTO / VO / AO /PO / UID 等。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion"),e("br"),t._v("\n反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion")])]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例： localValue / getHttpMessage() / inputUserId")])]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME"),e("br"),t._v("\n反例：MAX_COUNT / EXPIRED_TIME")])]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[e("p",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。")])]),t._v(" "),e("li",[e("p",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 类型与中括号紧挨相连来表示数组。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：定义整形数组 int[] arrayDemo。"),e("br"),t._v("\n反例：在 main 参数中，使用 String args[]来定义。")])]),t._v(" "),e("ol",{attrs:{start:"9"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。")])]),t._v(" "),e("blockquote",[e("p",[t._v('说明：在本文 MySQL 规约中的建表约定第一条，表达是与否的变量采用 is_xxx 的命名方式，所以，需要在"<"resultMap">"设置从 is_xxx 到 xxx 的映射关系。'),e("br"),t._v("\n反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()，框架在反向解析的时候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。")])]),t._v(" "),e("ol",{attrs:{start:"10"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：应用工具类包名为 com.alibaba.ei.kunlun.aap.util、类名为 MessageUtils（此规则参考 spring 的框架结构）")])]),t._v(" "),e("ol",{attrs:{start:"11"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。")])]),t._v(" "),e("blockquote",[e("p",[t._v("说明：子类、父类成员变量名相同，即使是 public 类型的变量也能够通过编译，另外，局部变量在同一方法内的不同代码块中同名也是合法的，这些情况都要避免。对于非 setter/getter 的参数名称也要避免与成员变量名称相同。\n反例：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class ConfusingName {\n public int stock;\n // 非 setter/getter 的参数名称，不允许与本类成员变量同名\n public void get(String alibaba) {\n if (condition) {\n final int money = 666;\n // ...\n }\n for (int i = 0; i < 10; i++) {\n // 在同一方法体中，不允许与其它代码块中的 money 命名相同\n final int money = 15978;\n // ...\n }\n }\n}\nclass Son extends ConfusingName {\n // 不允许与父类的成员变量名称相同\n public int stock;\n}\n")])])]),e("ol",{attrs:{start:"12"}},[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 杜绝完全不规范的缩写，避免望文不知义。")])]),t._v(" "),e("blockquote",[e("p",[t._v("反例：AbstractClass“缩写”成 AbsClass；condition“缩写”成 condi；Function 缩写”成 Fu，此类随意缩写严重降低了代码的可阅读性。")])]),t._v(" "),e("ol",{attrs:{start:"13"}},[e("li",[e("strong",[t._v("【推荐】")]),t._v(" 为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：对某个对象引用的 volatile 字段进行原子更新的类名为 AtomicReferenceFieldUpdater。"),e("br"),t._v("\n反例：常见的方法内变量为 int a;的定义方式。")])]),t._v(" "),e("ol",{attrs:{start:"14"}},[e("li",[e("strong",[t._v("【推荐】")]),t._v(" 在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT"),e("br"),t._v("\n反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD")])]),t._v(" "),e("ol",{attrs:{start:"15"}},[e("li",[e("strong",[t._v("【推荐】")]),t._v(" 如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式。")])]),t._v(" "),e("blockquote",[e("p",[t._v("说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。"),e("br"),t._v("\n正例： public class OrderFactory;"),e("br"),t._v("\npublic class LoginProxy;"),e("br"),t._v("\npublic class ResourceObserver;")])]),t._v(" "),e("ol",{attrs:{start:"16"}},[e("li",[e("strong",[t._v("【推荐】")]),t._v(" 接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，确定与接口方法相关，并且是整个应用的基础常量。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：接口方法签名 void commit();"),e("br"),t._v('\n接口基础常量 String COMPANY = "alibaba";'),e("br"),t._v("\n反例：接口方法定义 public abstract void f();"),e("br"),t._v("\n说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。")])]),t._v(" "),e("ol",{attrs:{start:"17"}},[e("li",[t._v("接口和实现类的命名有两套规则：")])]),t._v(" "),e("ul",[e("li",[e("em",[e("strong",[t._v("【强制】")])]),t._v(" 对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用Impl 的后缀与接口区别。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：CacheServiceImpl 实现 CacheService 接口。")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("【推荐】")]),t._v(" 如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able 的形容词）。")])]),t._v(" "),e("blockquote",[e("p",[t._v("正例：AbstractTranslator 实现 Translatable 接口。")])]),t._v(" "),e("ol",{attrs:{start:"18"}},[e("li",[e("em",[t._v("【参考】")]),t._v(" 枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。")])]),t._v(" "),e("blockquote",[e("p",[t._v("说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。"),e("br"),t._v("\n正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。")])]),t._v(" "),e("ol",{attrs:{start:"19"}},[e("li",[e("em",[t._v("【参考】")]),t._v(" 各层命名规约：")])]),t._v(" "),e("ul",[e("li",[t._v("Service/DAO 层方法命名规约")])]),t._v(" "),e("blockquote",[e("p",[t._v("1） 获取单个对象的方法用 get 做前缀。"),e("br"),t._v("\n2） 获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects。"),e("br"),t._v("\n3） 获取统计值的方法用 count 做前缀。"),e("br"),t._v("\n4） 插入的方法用 save/insert 做前缀。"),e("br"),t._v("\n5） 删除的方法用 remove/delete 做前缀。"),e("br"),t._v("\n6） 修改的方法用 update 做前缀。")])]),t._v(" "),e("ul",[e("li",[t._v("领域模型命名规约")])]),t._v(" "),e("blockquote",[e("p",[t._v("1） 数据对象：xxxDO，xxx 即为数据表名。"),e("br"),t._v("\n2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。"),e("br"),t._v("\n3） 展示对象：xxxVO，xxx 一般为网页名称。"),e("br"),t._v("\n4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。")])])])}),[],!1,null,null,null);e.default=_.exports}}]);