(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{550:function(o,e,r){"use strict";r.r(e);var t=r(0),a=Object(t.a)({},(function(){var o=this,e=o._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h2",{attrs:{id:"初识dubbo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初识dubbo"}},[o._v("#")]),o._v(" 初识Dubbo")]),o._v(" "),e("p",[o._v("Apache Dubbo是一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力：")]),o._v(" "),e("ul",[e("li",[e("p",[o._v("面向接口的远程方法调用；")])]),o._v(" "),e("li",[e("p",[o._v("可靠、智能的容错和负载均衡；")])]),o._v(" "),e("li",[e("p",[o._v("服务自动注册和发现能力。")])])]),o._v(" "),e("blockquote",[e("p",[o._v("简单地说， Dubbo 是一个分布式服务框架，致力于提供高性能、透明化的 RPC 远程服务调用方案以及服务治理方案，以帮助我们解决微服务架构落地时的问题。")])]),o._v(" "),e("h2",{attrs:{id:"架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[o._v("#")]),o._v(" 架构")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803100359.png",alt:"image-20200803100359048"}})]),o._v(" "),e("ul",[e("li",[e("p",[o._v("Registry：注册中心。 负责服务地址的注册与查找，服务的 Provider 和 Consumer 只在启动时与注册中心交互。注册中心通过长连接感知 Provider 的存在，在 Provider 出现宕机的时候，注册中心会立即推送相关事件通知 Consumer。")])]),o._v(" "),e("li",[e("p",[o._v("Provider：服务提供者。 在它启动的时候，会向 Registry 进行注册操作，将自己服务的地址和相关配置信息封装成 URL 添加到 ZooKeeper 中。")])]),o._v(" "),e("li",[e("p",[o._v("Consumer：服务消费者。 在它启动的时候，会向 Registry 进行订阅操作。订阅操作会从 ZooKeeper 中获取 Provider 注册的 URL，并在 ZooKeeper 中添加相应的监听器。获取到 Provider URL 之后，Consumer 会根据负载均衡算法从多个 Provider 中选择一个 Provider 并与其建立连接，最后发起对 Provider 的 RPC 调用。 如果 Provider URL 发生变更，Consumer 将会通过之前订阅过程中在注册中心添加的监听器，获取到最新的 Provider URL 信息，进行相应的调整，比如断开与宕机 Provider 的连接，并与新的 Provider 建立连接。Consumer 与 Provider 建立的是长连接，且 Consumer 会缓存 Provider 信息，所以一旦连接建立，即使注册中心宕机，也不会影响已运行的 Provider 和 Consumer。")])]),o._v(" "),e("li",[e("p",[o._v("Monitor：监控中心。 用于统计服务的调用次数和调用时间。Provider 和 Consumer 在运行过程中，会在内存中统计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。监控中心在上面的架构图中并不是必要角色，监控中心宕机不会影响 Provider、Consumer 以及 Registry 的功能，只会丢失监控数据而已。")])])]),o._v(" "),e("h2",{attrs:{id:"搭建dubbo源码环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搭建dubbo源码环境"}},[o._v("#")]),o._v(" 搭建Dubbo源码环境")]),o._v(" "),e("p",[o._v("当然，要搭建Dubbo 源码环境，你首先需要下载源码。这里你可以直接从官方仓库 https://github.com/apache/dubboFork 到自己的仓库，直接执行下面的命令去下载代码：")]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("git clone git@github.com:xxxxxxxx/dubbo.git \n")])])]),e("p",[o._v("接下来，执行 mvn 命令进行编译")]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("mvn clean install -Dmaven.test.skip=true\n")])])]),e("p",[o._v("最后，执行下面的命令转换成 IDEA 项目：")]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("mvn idea:idea // 要是执行报错，就执行这个 mvn idea:workspace\n")])])]),e("h2",{attrs:{id:"dubbo源码核心模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubbo源码核心模块"}},[o._v("#")]),o._v(" Dubbo源码核心模块")]),o._v(" "),e("p",[o._v("项目结构:")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803101348.png",alt:"image-20200803101348893"}})]),o._v(" "),e("ul",[e("li",[e("p",[o._v("dubbo-common 模块: Dubbo的一个公共模块,其中有很多工具类以及公共逻辑,例如Dubbo SPI实现,时间轮实现,动态编译器等")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803102506.png",alt:"image-20200803102506460"}})])]),o._v(" "),e("li",[e("p",[o._v("dobbo-remoting 模块: Dubbo的远程通信模块,其中的子模块依赖各种开源组件实现远程通信;在dobbo-remoting-api子模块中定义该模块的抽象依赖,在其他子模块依赖其他开源组件进行实现,例如duboo-remoting-netty4子模块依赖Netty4实现远程通信,dobbo-remoting-zookeeper 通过Apache Curator实现与ZooKeeper 集群的交互")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803103035.png",alt:"image-20200803103035646"}})])]),o._v(" "),e("li",[e("p",[o._v("dubbo-rpc 模块： Dubbo 中对远程调用协议进行抽象的模块，其中抽象了各种协议，依赖于 dubbo-remoting 模块的远程调用功能。dubbo-rpc-api 子模块是核心抽象，其他子模块是针对具体协议的实现，例如，dubbo-rpc-dubbo 子模块是对 Dubbo 协议的实现，依赖了 dubbo-remoting-netty4 等 dubbo-remoting 子模块。 dubbo-rpc 模块的实现中只包含一对一的调用，不关心集群的相关内容。")])])]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803103136.png",alt:"image-20200803103136643"}})]),o._v(" "),e("ul",[e("li",[e("p",[o._v("dubbo-cluster 模块： Dubbo 中负责管理集群的模块，提供了负载均衡、容错、路由等一系列集群相关的功能，最终的目的是将多个 Provider 伪装为一个 Provider，这样 Consumer 就可以像调用一个 Provider 那样调用 Provider 集群了。")])]),o._v(" "),e("li",[e("p",[o._v("dubbo-registry 模块： Dubbo 中负责与多种开源注册中心进行交互的模块，提供注册中心的能力。其中， dubbo-registry-api 子模块是顶层抽象，其他子模块是针对具体开源注册中心组件的具体实现，例如，dubbo-registry-zookeeper 子模块是 Dubbo 接入 ZooKeeper 的具体实现。")])])]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803103225.png",alt:"image-20200803103225413"}})]),o._v(" "),e("ul",[e("li",[e("p",[o._v("dubbo-monitor 模块： Dubbo 的监控模块，主要用于统计服务调用次数、调用时间以及实现调用链跟踪的服务。")])]),o._v(" "),e("li",[e("p",[o._v("dubbo-config 模块： Dubbo 对外暴露的配置都是由该模块进行解析的。例如，dubbo-config-api 子模块负责处理 API 方式使用时的相关配置，dubbo-config-spring 子模块负责处理与 Spring 集成使用时的相关配置方式。有了 dubbo-config 模块，用户只需要了解 Dubbo 配置的规则即可，无须了解 Dubbo 内部的细节。")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803103332.png",alt:"image-20200803103332594"}})])]),o._v(" "),e("li",[e("p",[o._v("dubbo-metadata 模块： Dubbo 的元数据模块（本课程后续会详细介绍元数据的内容）。dubbo-metadata 模块的实现套路也是有一个 api 子模块进行抽象，然后其他子模块进行具体实现。")])])]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803103401.png",alt:"image-20200803103401130"}})]),o._v(" "),e("ul",[e("li",[o._v("dubbo-configcenter 模块： Dubbo 的动态配置模块，主要负责外部化配置以及服务治理规则的存储与通知，提供了多个子模块用来接入多种开源的服务发现组件。")])]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803103444.png",alt:"image-20200803103444130"}})]),o._v(" "),e("h2",{attrs:{id:"dubbo-源码中的-demo-示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-源码中的-demo-示例"}},[o._v("#")]),o._v(" Dubbo 源码中的 Demo 示例")]),o._v(" "),e("p",[o._v("在 Dubbo 源码中我们可以看到一个 dubbo-demo 模块，共包括三个非常基础 的 Dubbo 示例项目，分别是： 使用 XML 配置的 Demo 示例、使用注解配置的 Demo 示例 以及 直接使用 API 的 Demo 示例,这三个项目也将作为后续 Debug Dubbo 源码的入口，我们会根据需要在其之上进行修改 。不过在这儿之前，你需要先启动 ZooKeeper 作为注册中心，然后编写一个业务接口作为 Provider 和 Consumer 的公约。")]),o._v(" "),e("h4",{attrs:{id:"启动-zookeeper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动-zookeeper"}},[o._v("#")]),o._v(" 启动 ZooKeeper")]),o._v(" "),e("p",[o._v("在前面 Dubbo 的架构图中，你可以看到 Provider 的地址以及配置信息是通过注册中心传递给 Consumer 的。 Dubbo 支持的注册中心尽管有很多， 但在生产环境中， 基本都是用 ZooKeeper 作为注册中心 。因此，在调试 Dubbo 源码时，自然需要在本地启动 ZooKeeper。首先下载"),e("a",{attrs:{href:"https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/",target:"_blank",rel:"noopener noreferrer"}},[o._v("Zookeeper"),e("OutboundLink")],1),o._v(",然后解压文件得到zookeeper-3.4.14文件，进入 zookeeper-3.4.14 目录，复制 conf/zoo_sample.cfg 文件并重命名为 conf/zoo.cfg，之后根据不同环境执行相应命令就可以启动 ZooKeeper了。")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803104934.png",alt:"image-20200803104934598"}})]),o._v(" "),e("h4",{attrs:{id:"业务接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业务接口"}},[o._v("#")]),o._v(" 业务接口")]),o._v(" "),e("p",[o._v("在使用 Dubbo 之前，你还需要一个业务接口，这个业务接口可以认为是 Dubbo Provider 和 Dubbo Consumer 的公约，反映出很多信息：")]),o._v(" "),e("ul",[e("li",[e("p",[o._v("Provider ，如何提供服务、提供的服务名称是什么、需要接收什么参数、需要返回什么响应；")])]),o._v(" "),e("li",[e("p",[o._v("Consumer ，如何使用服务、使用的服务名称是什么、需要传入什么参数、会得到什么响应。")])])]),o._v(" "),e("p",[o._v("dubbo-demo-interface 模块就是定义业务接口的地方，如下图所示：")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/07/20200803105117.png",alt:"image-20200803105117431"}})]),o._v(" "),e("p",[o._v("其中，DemoService 接口中定义了两个方法：")]),o._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[o._v("public interface DemoService { \n    String sayHello(String name); // 同步调用 \n    // 异步调用 \n    default CompletableFuture<String> sayHelloAsync(String name) {  \n        return CompletableFuture.completedFuture(sayHello(name)); \n    } \n} \n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);