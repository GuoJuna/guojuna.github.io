(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{615:function(_,v,t){"use strict";t.r(v);var i=t(0),e=Object(i.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"什么是mvcc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvcc"}},[_._v("#")]),_._v(" 什么是MVCC？")]),_._v(" "),v("p",[_._v("1、MVCC\nMVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。")]),_._v(" "),v("p",[v("strong",[_._v("MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。")])]),_._v(" "),v("p",[_._v("2、当前读")]),_._v(" "),v("p",[_._v("像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。")]),_._v(" "),v("p",[_._v("3、快照读（提高数据库的并发查询能力）")]),_._v(" "),v("p",[_._v("像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本")]),_._v(" "),v("p",[_._v("4、当前读、快照读、MVCC关系")]),_._v(" "),v("p",[_._v("MVCC多版本并发控制指的是维持一个数据的多个版本，使得读写操作没有冲突，快照读是MySQL为实现MVCC的一个非阻塞读功能。MVCC模块在MySQL中的具体实现是由三个隐式字段，undo日志、read view三个组件来实现的。")]),_._v(" "),v("h2",{attrs:{id:"mvcc解决的问题是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc解决的问题是什么"}},[_._v("#")]),_._v(" MVCC解决的问题是什么？")]),_._v(" "),v("p",[_._v("数据库并发场景有三种，分别为：")]),_._v(" "),v("ul",[v("li",[_._v("读读：不存在任何问题，也不需要并发控制")]),_._v(" "),v("li",[_._v("读写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读、幻读、不可重复读")]),_._v(" "),v("li",[_._v("写写：有线程安全问题，可能存在更新丢失问题")])]),_._v(" "),v("p",[_._v("MVCC是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单项增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照，所以MVCC可以为数据库解决一下问题：")]),_._v(" "),v("p",[_._v("1、在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能")]),_._v(" "),v("p",[_._v("2、解决脏读、幻读、不可重复读等事务隔离问题，但是不能解决更新丢失问题")]),_._v(" "),v("h2",{attrs:{id:"mvcc实现原理是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvcc实现原理是什么"}},[_._v("#")]),_._v(" MVCC实现原理是什么？")]),_._v(" "),v("p",[_._v("mvcc的实现原理主要依赖于记录中的三个隐藏字段，undolog，read view来实现的。")]),_._v(" "),v("p",[v("strong",[_._v("隐藏字段")])]),_._v(" "),v("p",[_._v("每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段")]),_._v(" "),v("p",[_._v("DB_TRX_ID")]),_._v(" "),v("p",[_._v("6字节，最近修改事务id，记录创建这条记录或者最后一次修改该记录的事务id")]),_._v(" "),v("p",[_._v("DB_ROLL_PTR")]),_._v(" "),v("p",[_._v("7字节，回滚指针，指向这条记录的上一个版本,用于配合undolog，指向上一个旧版本")]),_._v(" "),v("p",[_._v("DB_ROW_JD")]),_._v(" "),v("p",[_._v("6字节，隐藏的主键，如果数据表没有主键，那么innodb会自动生成一个6字节的row_id")]),_._v(" "),v("p",[_._v("记录如图所示：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024200032.png",alt:"image-20210225233929554"}})]),_._v(" "),v("p",[_._v("在上图中，DB_ROW_ID是数据库默认为该行记录生成的唯一隐式主键，DB_TRX_ID是当前操作该记录的事务ID，DB_ROLL_PTR是一个回滚指针，用于配合undo日志，指向上一个旧版本")]),_._v(" "),v("p",[v("strong",[_._v("undo log")])]),_._v(" "),v("p",[_._v("undolog被称之为回滚日志，表示在进行insert，delete，update操作的时候产生的方便回滚的日志")]),_._v(" "),v("p",[_._v("当进行insert操作的时候，产生的undolog只在事务回滚的时候需要，并且在事务提交之后可以被立刻丢弃")]),_._v(" "),v("p",[_._v("当进行update和delete操作的时候，产生的undolog不仅仅在事务回滚的时候需要，在快照读的时候也需要，所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除（当数据发生更新和删除操作的时候都只是设置一下老记录的deleted_bit，并不是真正的将过时的记录删除，因为为了节省磁盘空间，innodb有专门的purge线程来清除deleted_bit为true的记录，如果某个记录的deleted_id为true，并且DB_TRX_ID相对于purge线程的read view 可见，那么这条记录一定时可以被清除的）")]),_._v(" "),v("p",[v("strong",[_._v("下面我们来看一下undolog生成的记录链")])]),_._v(" "),v("p",[_._v("1、假设有一个事务编号为1的事务向表中插入一条记录，那么此时行数据的状态为：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024200033.png",alt:"image-20210225235444975"}})]),_._v(" "),v("p",[_._v("2、假设有第二个事务编号为2对该记录的name做出修改，改为lisi")]),_._v(" "),v("p",[_._v("在事务2修改该行记录数据时，数据库会对该行加排他锁")]),_._v(" "),v("p",[_._v("然后把该行数据拷贝到undolog中，作为 旧记录，即在undolog中有当前行的拷贝副本")]),_._v(" "),v("p",[_._v("拷贝完毕后，修改该行name为lisi，并且修改隐藏字段的事务id为当前事务2的id，回滚指针指向拷贝到undolog的副本记录中")]),_._v(" "),v("p",[_._v("事务提交后，释放锁")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024200034.png",alt:"image-20210313220450629"}})]),_._v(" "),v("p",[_._v("3、假设有第三个事务编号为3对该记录的age做了修改，改为32")]),_._v(" "),v("p",[_._v("在事务3修改该行数据的时，数据库会对该行加排他锁")]),_._v(" "),v("p",[_._v("然后把该行数据拷贝到undolog中，作为旧纪录，发现该行记录已经有undolog了，那么最新的旧数据作为链表的表头，插在该行记录的undolog最前面")]),_._v(" "),v("p",[_._v("修改该行age为32岁，并且修改隐藏字段的事务id为当前事务3的id，回滚指针指向刚刚拷贝的undolog的副本记录")]),_._v(" "),v("p",[_._v("事务提交，释放锁")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024200035.png",alt:"image-20210313220337624"}})]),_._v(" "),v("p",[_._v("从上述的一系列图中，大家可以发现，不同事务或者相同事务的对同一记录的修改，会导致该记录的undolog生成一条记录版本线性表，即链表，undolog的链首就是最新的旧记录，链尾就是最早的旧记录。")]),_._v(" "),v("p",[v("strong",[_._v("Read View")])]),_._v(" "),v("p",[_._v("上面的流程如果看明白了，那么大家需要再深入理解下read view的概念了。")]),_._v(" "),v("p",[_._v("Read View是事务进行快照读操作的时候生产的读视图，在该事务执行快照读的那一刻，会生成一个数据系统当前的快照，记录并维护系统当前活跃事务的id，事务的id值是递增的。")]),_._v(" "),v("p",[_._v("其实Read View的最大作用是用来做可见性判断的，也就是说当某个事务在执行快照读的时候，对该记录创建一个Read View的视图，把它当作条件去判断当前事务能够看到哪个版本的数据，有可能读取到的是最新的数据，也有可能读取的是当前行记录的undolog中某个版本的数据")]),_._v(" "),v("p",[_._v("Read View遵循的可见性算法主要是将要被修改的数据的最新记录中的DB_TRX_ID（当前事务id）取出来，与系统当前其他活跃事务的id去对比，如果DB_TRX_ID跟Read View的属性做了比较，不符合可见性，那么就通过DB_ROLL_PTR回滚指针去取出undolog中的DB_TRX_ID做比较，即遍历链表中的DB_TRX_ID，直到找到满足条件的DB_TRX_ID,这个DB_TRX_ID所在的旧记录就是当前事务能看到的最新老版本数据。")]),_._v(" "),v("p",[_._v("Read View的可见性规则如下所示：")]),_._v(" "),v("p",[_._v("首先要知道Read View中的三个全局属性：")]),_._v(" "),v("p",[_._v("trx_list:一个数值列表，用来维护Read View生成时刻系统正活跃的事务ID（1,2,3）")]),_._v(" "),v("p",[_._v("up_limit_id:记录trx_list列表中事务ID最小的ID（1）")]),_._v(" "),v("p",[_._v("low_limit_id:Read View生成时刻系统尚未分配的下一个事务ID，（4）")]),_._v(" "),v("p",[_._v("具体的比较规则如下：")]),_._v(" "),v("p",[_._v("1、首先比较DB_TRX_ID < up_limit_id,如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断")]),_._v(" "),v("p",[_._v("2、接下来判断DB_TRX_ID >= low_limit_id,如果大于等于则代表DB_TRX_ID所在的记录在Read View生成后才出现的，那么对于当前事务肯定不可见，如果小于，则进入下一步判断")]),_._v(" "),v("p",[_._v("3、判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit，修改的数据，当前事务也是看不到，如果不在，则说明这个事务在Read View生成之前就已经开始commit，那么修改的结果是能够看见的。")]),_._v(" "),v("p",[_._v("7、MVCC的整体处理流程")]),_._v(" "),v("p",[_._v("假设有四个事务同时在执行，如下图所示：")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("事务1")]),_._v(" "),v("th",[_._v("事务2")]),_._v(" "),v("th",[_._v("事务3")]),_._v(" "),v("th",[_._v("事务4")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("事务开始")]),_._v(" "),v("td",[_._v("事务开始")]),_._v(" "),v("td",[_._v("事务开始")]),_._v(" "),v("td",[_._v("事务开始")])]),_._v(" "),v("tr",[v("td",[_._v("......")]),_._v(" "),v("td",[_._v("......")]),_._v(" "),v("td",[_._v("......")]),_._v(" "),v("td",[_._v("修改且已提交")])]),_._v(" "),v("tr",[v("td",[_._v("进行中")]),_._v(" "),v("td",[_._v("快照读")]),_._v(" "),v("td",[_._v("进行中")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("......")]),_._v(" "),v("td",[_._v("......")]),_._v(" "),v("td",[_._v("......")]),_._v(" "),v("td")])])]),_._v(" "),v("p",[_._v("从上述表格中，我们可以看到，当事务2对某行数据执行了快照读，数据库为该行数据生成一个Read View视图，可以看到事务1和事务3还在活跃状态，事务4在事务2快照读的前一刻提交了更新，所以，在Read View中记录了系统当前活跃事务1，3，维护在一个列表中。同时可以看到up_limit_id的值为1，而low_limit_id为5，如下图所示：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024195547.png",alt:"image-20210520143604440"}})]),_._v(" "),v("p",[_._v("在上述的例子中，只有事务4修改过该行记录，并在事务2进行快照读前，就提交了事务，所以该行当前数据的undolog如下所示：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024200036.png",alt:"image-20210520143717928"}})]),_._v(" "),v("p",[_._v("当事务2在快照读该行记录的是，会拿着该行记录的DB_TRX_ID去跟up_limit_id,lower_limit_id和活跃事务列表进行比较，判读事务2能看到该行记录的版本是哪个。")]),_._v(" "),v("p",[_._v("具体流程如下：先拿该行记录的事务ID（4）去跟Read View中的up_limit_id相比较，判断是否小于，通过对比发现不小于，所以不符合条件，继续判断4是否大于等于low_limit_id,通过比较发现也不大于，所以不符合条件，判断事务4是否处理trx_list列表中，发现不再次列表中，那么符合可见性条件，所以事务4修改后提交的最新结果对事务2 的快照是可见的，因此，事务2读取到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度的最新版本。如下图所示：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2021/10/20211024200037.png",alt:"image-20210520143742317"}})])])}),[],!1,null,null,null);v.default=e.exports}}]);