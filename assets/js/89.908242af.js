(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{630:function(t,e,a){"use strict";a.r(e);var l=a(0),o=Object(l.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"java8新特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java8新特性"}},[t._v("#")]),t._v(" Java8新特性")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("速度更快")]),t._v(" "),e("li",[t._v("代码更少(增加了新的语法Lambda表达式)")]),t._v(" "),e("li",[t._v("强大的Stream API")]),t._v(" "),e("li",[t._v("便于并行")]),t._v(" "),e("li",[t._v("最大化减少空指针异常 Optional")])])]),t._v(" "),e("h2",{attrs:{id:"lambda基础语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lambda基础语法"}},[t._v("#")]),t._v(" Lambda基础语法")]),t._v(" "),e("blockquote",[e("ul",[e("li",[e("p",[t._v('Lambda 表达式的基础语法: Java8中引入了一个新的操作符 "->" 该操作符为箭头操作符或Lambda操作符\n箭头操作符讲Lambda表达式拆分成两部分;')])]),t._v(" "),e("li",[e("p",[t._v("左侧: Lambda 表达式的参数列表")])]),t._v(" "),e("li",[e("p",[t._v("右侧: Lambda 表达式中所执行的功能,即Lambda体")])])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v('语法格式一 : 无参数,无返回值\n() -> System.out.println("hello")')]),t._v(" "),e("li",[t._v("语法格式二 : 有一个参数,并且无返回值\n(x) -> System.out.println(x)")]),t._v(" "),e("li",[t._v("语法格式三 : 若只有一个参数,小括号可以省略不写")]),t._v(" "),e("li",[t._v('语法格式四: 有两个以上的参数,有返回值,并且Lambda体有多条语句\nComparator(Integer) com = (x,y) -> {\nSystem.out.println("hello");\nreturn Integer.compare(x,y);\n} ;')]),t._v(" "),e("li",[t._v("语法格式五: 若Lambda体中只有一条语句, return 和大括号都可以省略不写\nComparator<Integer> com = (x,y) -> Integer.compare(x,y);")]),t._v(" "),e("li",[t._v('语法格式六: Lambda表达式的参数列表的数据类型可以省略不写,因为JVM编译器通过上下文推断出,数据类型; 即"类型推断"\n(Integer x,Integer y) -> Integer.compare(x,y);')])])]),t._v(" "),e("h3",{attrs:{id:"内置的四大函数式接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内置的四大函数式接口"}},[t._v("#")]),t._v(" 内置的四大函数式接口")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("Consumer<T>  :消费性接口\nvoid accept(T t)")]),t._v(" "),e("li",[t._v("Supplier<T> : 供给型接口\nT get()")]),t._v(" "),e("li",[t._v("Function<T,R>  :函数型接口\nR apply(T t)")]),t._v(" "),e("li",[t._v("Predicte<T,R> : 断言型接口\nboolean test(T t);")])])]),t._v(" "),e("h3",{attrs:{id:"方法引用和构造器引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法引用和构造器引用"}},[t._v("#")]),t._v(" 方法引用和构造器引用")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v('方法引用: 若Lambda体中的内容有方法已经实现了,我们可以使用"方法引用"(可以理解为方法引用是Lambda 表达式的另外一种表现形式)')])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("主要有三种语法格式:")]),t._v(" "),e("li",[t._v("对象::实例方法名")]),t._v(" "),e("li",[t._v("类:: 静态方法名")]),t._v(" "),e("li",[t._v("类:: 实例方法名")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("1.Lambda 体中调用方法的参数列表与返回值类型,要与函数式接口中抽象方法的函数列表和返回值类型保持一致")]),t._v(" "),e("li",[t._v("2.若Lambda 参数列表中的第一个参数是 实例方法的调用者,而第二个参数是实例方法的参数时,可以使用ClassName :: method")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("构造器引用")]),t._v(" "),e("li",[t._v("格式 :\nClassNeme :: new")])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意: 需要调用的构造器的参数列表要与函数式接口中的抽象方法的参数列表保持一致")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("数组引用")]),t._v(" "),e("li",[t._v("Type::new")])])]),t._v(" "),e("h2",{attrs:{id:"stream-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream-api"}},[t._v("#")]),t._v(" Stream API")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("流(Stream) 是数据渠道,用于操作数据源(集合,数组等) 所生成的元素序列.")]),t._v(" "),e("li",[t._v("集合讲的是数据,流讲的是计算!")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("注意:")])]),t._v(" "),e("ol",[e("li",[t._v("Stream 自己不会存储元素")]),t._v(" "),e("li",[t._v("Stream 不会改变源对象. 相反,他们会返回一个持有结果的新Stream.")])]),t._v(" "),e("ul",[e("li",[t._v("3.Stream 操作是延迟执行的. 这意味着他们会等到需要结果的时候才执行.")])])]),t._v(" "),e("h3",{attrs:{id:"stream-的操作三个步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream-的操作三个步骤"}},[t._v("#")]),t._v(" Stream 的操作三个步骤")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("创建Stream")]),t._v(" "),e("li",[t._v("中间操作")]),t._v(" "),e("li",[t._v("终止操作")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("一.创建Stream")])]),t._v(" "),e("ol",[e("li",[t._v("可以通过Collection 系列集合通过的Stream() 或 parallelStream()\nlist.stream()")]),t._v(" "),e("li",[t._v("通过Arrays 中的静态方法Stream()\nArrays.stream(arr);")]),t._v(" "),e("li",[t._v('通过Stream 类中的静态方法 of()\nStream.of("aa","bb")')]),t._v(" "),e("li",[t._v("创建无限流\n迭代--\x3e Stream.iterate(0, (x) -> x+2)\n生成--\x3e Stream .generate(() -> Math.random());")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v('二.中间操作\n中间操作不会执行任何的处理,而在终止操作是一次性全部处理,称为"惰性求值"\n内部迭代: 迭代操作由Stream API完成')])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v(". 筛选与切片")])]),t._v(" "),e("ol",[e("li",[t._v("filter--接受Lambda,从流中排出某些元素.")]),t._v(" "),e("li",[t._v("limit--阶段流,使其元素不超过给定数量")]),t._v(" "),e("li",[t._v("skip(n) -- 跳过元素,返回一个扔掉的前n个元素的流若流中元素不足n个,则返回一个空流.与limit(n) 互补")]),t._v(" "),e("li",[t._v("distinct -- 筛选,通过流所生成元素的hashCode() 和equals()")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("映射")])]),t._v(" "),e("ol",[e("li",[t._v("map -- 接受Lambda, 将元素转换成其他形式或提取信息.接受一个函数作为参数,改参数会被应用到每个元素上,并将其映射成一个新的元素.")]),t._v(" "),e("li",[t._v("flatMap -- 接受一个函数作为参数,将流中的每个值都换成另一个流,然后把所有流连接成一个流")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("排序")])]),t._v(" "),e("ol",[e("li",[t._v("sorted() -- 自然排序")]),t._v(" "),e("li",[t._v("sored(Comparator com) -- 定制排序(Comparetor)")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("三.终止操作")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("查找与匹配")])]),t._v(" "),e("ol",[e("li",[t._v("allMatch-- 检查是否匹配所有元素")]),t._v(" "),e("li",[t._v("anyMatch-- 检查是够至少匹配一个元素")]),t._v(" "),e("li",[t._v("noneMatch-- 检查是否没有匹配所有元素")]),t._v(" "),e("li",[t._v("findFirst-- 返回第一个元素")]),t._v(" "),e("li",[t._v("findAny-- 返回当前流中任意元素")]),t._v(" "),e("li",[t._v("count-- 返回六中元素的总个数")]),t._v(" "),e("li",[t._v("max-- 返回流中最大值")]),t._v(" "),e("li",[t._v("min-- 返回流中最小值")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("规约")])]),t._v(" "),e("ol",[e("li",[t._v("reduce(T identity,BinaryOption) / reduce(BinaryOperator) -- 可以将流中元素反复结合起来,得到一个值.")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("收集")])]),t._v(" "),e("ol",[e("li",[t._v("collect -- 将流转换为其他形式,接收一个Collector接口的实现,用于给Stream中元素做汇总的方法")])])]),t._v(" "),e("blockquote",[e("h3",{attrs:{id:"并行流和顺行流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并行流和顺行流"}},[t._v("#")]),t._v(" 并行流和顺行流")])]),t._v(" "),e("blockquote",[e("h3",{attrs:{id:"optional类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optional类"}},[t._v("#")]),t._v(" Optional类")]),t._v(" "),e("p",[t._v("Option<T> 类是一个容器类,代表一个值存在或不存在,原来用null表示一个值不存在")])]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("Optional 容器类的常用方法")])]),t._v(" "),e("ul",[e("li",[t._v("Optional.of(T t) : 创建一个Optional实例")]),t._v(" "),e("li",[t._v("Optional.empty() : 创建一个空的Optional 实例")]),t._v(" "),e("li",[t._v("Optional.ofNullable(T t) : 若t不为null,创建Optional 实例,否则创建空实例")]),t._v(" "),e("li",[t._v("isPresent() 判断是否包含值")]),t._v(" "),e("li",[t._v("orElse(T t) 如果调用对象包含值,返回该值,否则返回s获取的值")]),t._v(" "),e("li",[t._v("orElseGet(Supplier s) : 如果调用对象包含值,返回该值,否则返回s获取的值")]),t._v(" "),e("li",[t._v("map(Function f) : 如果有值对其处理,并返回处理后的Optional,否则返回Optional.empty()")]),t._v(" "),e("li",[t._v("flatMap(Function mapper) : 与map类似,要求返回值必须是Optional")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v('接口中的默认方法与静态方法\n接口默认方法的"类优先"原则')])])]),t._v(" "),e("blockquote",[e("h3",{attrs:{id:"新时间日期api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新时间日期api"}},[t._v("#")]),t._v(" 新时间日期API")]),t._v(" "),e("ol",[e("li",[t._v("LocalDate LocalTime LocalDateTime\nLocalDateTime ldt = LocalDateTime.now() 获取当前时间\nldt.plusYears(2) 加2年\nldt.minusMonths(2) 减2月")]),t._v(" "),e("li",[t._v("Instant : 时间戳(以Unix元年: 1970年1月1日 00:00:00 到某个时间之间的毫秒值)\nInstant ins = Instant.now()  默认获取UTC时区\nins1.atOffset(ZoneOffset.ofHours(8))")]),t._v(" "),e("li",[t._v("Duration : 计算两个 时间 之间的间隔\nPeriod : 计算两个 日期 之间的间隔")]),t._v(" "),e("li",[t._v("TemporalAdjuster : 时间校正器")]),t._v(" "),e("li",[t._v('DateTimeFormatter : 格式化时间/日期\nDateTimeFormatter.ofPattern("yyyyMMdd");')]),t._v(" "),e("li",[t._v('ZoneDate ZoneTime ZoneDateTime\nLocalDateTIme.now(ZoneId.of("Eurpope/Tallinn")')])])]),t._v(" "),e("h2",{attrs:{id:"分组统计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组统计"}},[t._v("#")]),t._v(" 分组统计")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Map\\<Integer, IntSummaryStatistics> map = list.stream().collect(Collectors.groupingBy(e -> DateUtil.beginOfMonth(e.getInputTime()).month(), Collectors.summarizingInt(BdMpuserPointsRecords::getPointsRecords)));\n\n")])])]),e("h2",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' /**\n     * 按照年龄分组, 30岁以下为"青年组", 30岁以上为"中年组", 过滤掉已删除(deleted=true)或不可用(enabled=false)用户\n     */\n    public Map\\<String, List\\<User>> groupUser(List\\<User> userList) {\n        Map\\<String, List\\<User>> rs = userList.stream().filter(e -> e.getEnabled() == true && e.getDeleted() == false)\n                .collect(Collectors.groupingBy(e -> {\n                    if (e.getAge() \\< 30) {\n                        return "青年组";\n                    } else {\n                        return "中年组";\n                    }\n                }));\n        return rs;\n    }\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' /**\n     * 按照年龄分组, 30岁以下为"青年组", 30岁以上为"中年组", 过滤掉已删除或不可用用户，并填充号码\n     * 号码从CustomerService.getCustomerCodeFromApi 获取\n     */\n    public Map\\<String, List\\<User>> groupUserAndFillPhone(List\\<User> userList) {\n        List\\<String> codeList = userList.stream().filter(e -> e.getEnabled() == true && e.getDeleted() == false)\n                .map(e -> e.getCustomerCode())\n                .collect(Collectors.toList());\n\n        Map\\<String, CustomerInfo> code2CustomerInfo = customerService.getCustomerCodeFromApi(codeList).stream().\n                collect(Collectors.toMap(CustomerInfo::getCustomerCode, Function.identity()));\n        userList.forEach(e -> {\n            e.setPhone(Optional.ofNullable(code2CustomerInfo.get(e.getCustomerCode())).orElse(new CustomerInfo()).getPhone());\n        });\n        return groupUser(userList);\n    }\n')])])])])}),[],!1,null,null,null);e.default=o.exports}}]);