(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{733:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一、单线程爬虫实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、单线程爬虫实现"}},[t._v("#")]),t._v(" 一、单线程爬虫实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("回顾之前我们完成的爬虫任务，都是单线程爬虫我们来看一下单线程完成的代码耗时\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import requests\nimport pymongo\n\n\nclass Aqiyi(object):\n    def __init__(self):\n        self.client = pymongo.MongoClient(host='127.0.0.1', port=27017)\n        self.collection = self.client['spider']['aqy']\n        self.headers = {\n            'referer': 'https://list.iqiyi.com/www/2/15-------------11-1-1-iqiyi--.html?s_source=PCW_SC',\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36',\n            'x-requested-with': 'XMLHttpRequest'\n        }\n        self.url = 'https://pcw-api.iqiyi.com/search/recommend/list'\n\n\n    def get_data(self, params):\n        response = requests.get(self.url, headers=self.headers, params=params)\n        return response.json()\n\n    def parse_data(self, data):\n        categoryVideos = data['data']['list']\n        for video in categoryVideos:\n            item = {}\n            item['title'] = video['title']\n            item['playUrl'] = video['playUrl']\n            item['description'] = video['description']\n            print(item)\n            self.save_data(item)\n\n    def save_data(self, item):\n        self.collection.insert_one(item)\n\n\n    def main(self):\n        for page in range(1, 2):\n            params = {\n                'channel_id': '2',\n                'data_type': '1',\n                'mode': '11',\n                'page_id': page,\n                'ret_num': '48',\n                'session': 'fc7d98794f15b224b169d328bf8f9f13',\n                'three_category_id': '15;must',\n            }\n            data = self.get_data(params)\n            self.parse_data(data)\n\n\n\nif __name__ == '__main__':\n    t1 = time.time()\n    yk = Aqiyi()\n    yk.main()\n    print(\"total cost:\", time.time() - t1)\n")])])]),s("h2",{attrs:{id:"二、多线程爬虫实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、多线程爬虫实现"}},[t._v("#")]),t._v(" 二、多线程爬虫实现")]),t._v(" "),s("blockquote",[s("p",[t._v("在前面爬虫基础知识案例中我们发现请求回来的总数据不是太多,时间性对来说还是比较快的,那么如果该网站有大量数据等待爬虫爬取,我们是不是需要使用多线程并发来操作爬虫的网络请求呢?")])]),t._v(" "),s("h3",{attrs:{id:"_1-回顾多线程的方法使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-回顾多线程的方法使用"}},[t._v("#")]),t._v(" 1.回顾多线程的方法使用")]),t._v(" "),s("p",[t._v("在python3中，主线程主进程结束，子线程，子进程不会结束")]),t._v(" "),s("p",[t._v("为了能够让主线程回收子线程，可以把子线程设置为守护线程,即该线程不重要，主线程结束，子线程结束")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("t1 = threading.Thread(targe=func,args=(,))\nt1.setDaemon(True)\nt1.start() #此时线程才会启动\n\n")])])]),s("h3",{attrs:{id:"_2-回顾队列模块的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-回顾队列模块的使用"}},[t._v("#")]),t._v(" 2.回顾队列模块的使用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("from queue import Queue\nq = Queue(maxsize=100)\nitem = {}\nq.put_nowait(item) #不等待直接放，队列满的时候会报错\nq.put(item) #放入数据，队列满的时候回等待\nq.get_nowait() #不等待直接取，队列空的时候会报错\nq.get() #取出数据，队列为空的时候会等待\nq.qsize() #获取队列中现存数据的个数 \nq.join() #队列中维持了一个计数，计数不为0时候让主线程阻塞等待，队列计数为0的时候才会继续往后执行\nq.task_done() \n# put的时候计数+1，get不会-1，get需要和task_done 一起使用才会-1\n")])])]),s("h3",{attrs:{id:"_3-多线程实现思路剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-多线程实现思路剖析"}},[t._v("#")]),t._v(" 3.多线程实现思路剖析")]),t._v(" "),s("ol",[s("li",[t._v("把爬虫中的每个步骤封装成函数，分别用线程去执行")]),t._v(" "),s("li",[t._v("不同的函数通过队列相互通信，函数间解耦 "),s("img",{attrs:{src:"imgs/05-01.png",alt:"img"}})])]),t._v(" "),s("h3",{attrs:{id:"_4-具体代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-具体代码实现"}},[t._v("#")]),t._v(" 4.具体代码实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import threading\nimport requests\nimport pymongo\nimport time\nfrom queue import Queue\n\nclass Aqiyi(object):\n    def __init__(self):\n        self.client = pymongo.MongoClient(host='127.0.0.1', port=27017)\n        self.collection = self.client['spider']['aqy']\n        self.headers = {\n            'referer': 'https://list.iqiyi.com/www/2/15-------------11-1-1-iqiyi--.html?s_source=PCW_SC',\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36',\n            'x-requested-with': 'XMLHttpRequest'\n        }\n        self.url = 'https://pcw-api.iqiyi.com/search/recommend/list?channel_id=2&data_type=1&mode=11&page_id={}&ret_num=48&session=85dd981b69cead4b60f6d980438a5664&three_category_id=15;must'\n        self.url_queue = Queue()\n        self.json_queue = Queue()\n        self.content_list_queue = Queue()\n\n    def get_url(self):\n        # print(2222222222222)\n        for i in range(1, 3):\n            self.url_queue.put(self.url.format(i))\n\n\n    def get_data(self):\n        while True:\n            url = self.url_queue.get()\n            # print(url)\n            response = requests.get(url, headers=self.headers)\n            time.sleep(1)\n            print(response.json())\n            self.json_queue.put(response.json())\n            self.url_queue.task_done()\n\n    def parse_data(self):\n        while True:\n            data = self.json_queue.get()\n            print(data)\n            categoryVideos = data['data']['list']\n            for video in categoryVideos:\n                item = {}\n                item['title'] = video['title']\n                item['playUrl'] = video['playUrl']\n                item['description'] = video['description']\n                self.content_list_queue.put(item)\n            self.json_queue.task_done()\n\n    def save_data(self):\n\n        while True:\n            item = self.content_list_queue.get()\n            print(item)\n            self.collection.insert_one(item)\n            self.content_list_queue.task_done()\n\n\n    def main(self):\n        thread_list = []\n        # 1.url_list\n        t_url = threading.Thread(target=self.get_url)\n        thread_list.append(t_url)\n        # 2.遍历，发送请求，\n        # print(1111)\n        for i in range(3):  # 三个线程发送请求\n            t_parse = threading.Thread(target=self.get_data)\n            thread_list.append(t_parse)\n        # 3.提取数据\n        t_content = threading.Thread(target=self.parse_data)\n        thread_list.append(t_content)\n        # 4.保存\n        t_save = threading.Thread(target=self.save_data)\n        thread_list.append(t_save)\n        # print(1111)\n        for t in thread_list:\n            t.setDaemon(True)  # 把子线程设置为守护线程，当前这个线程不重要，主线程结束，子线程结束\n            t.start()\n            # print(11111111111)\n\n        for q in [self.url_queue, self.json_queue, self.content_list_queue]:\n            q.join()  # 让主线程阻塞，等待队列的计数为0，\n\n        print(\"主线程结束\")\n\nif __name__ == '__main__':\n    t1 = time.time()\n    yk = Aqiyi()\n    yk.main()\n    print(\"total cost:\", time.time() - t1)\n")])])]),s("h5",{attrs:{id:"注意点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[t._v("#")]),t._v(" 注意点：")]),t._v(" "),s("ul",[s("li",[t._v("put会让队列的计数+1，但是单纯的使用get不会让其-1，需要和task_done同时使用才能够-1")]),t._v(" "),s("li",[t._v("task_done不能放在另一个队列的put之前，否则可能会出现数据没有处理完成，程序结束的情况")])]),t._v(" "),s("h2",{attrs:{id:"三、线程池实现爬虫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、线程池实现爬虫"}},[t._v("#")]),t._v(" 三、线程池实现爬虫")]),t._v(" "),s("h3",{attrs:{id:"_1-线程池使用方法介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程池使用方法介绍"}},[t._v("#")]),t._v(" 1.线程池使用方法介绍")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("线程池，是一种线程的使用模式，它为了降低线程使用中频繁的创建和销毁所带来的资源消耗与代价。通过创建一定数量的线程，让他们时刻准备就绪等待新任务的到达，而任务执行结束之后再重新回来继续待命")])]),t._v(" "),s("li",[s("p",[t._v("实例化线程池对象")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("from concurrent.futures import ThreadPoolExecutor \ndef crawl(url): \n\tprint(url) \nif __name__ == '__main__0': \n\tbase_url = 'https://jobs.51job.com/pachongkaifa/p{}/' \n\twith ThreadPoolExecutor(10) as f: \n\tfor i in range(1,15): \n\t\tf.submit(crawl,url=base_url.format(i))\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用线程池来执行线程任务的步骤如下：")]),t._v(" "),s("ol",[s("li",[t._v("调用 ThreadPoolExecutor 类的构造器创建一个线程池。")]),t._v(" "),s("li",[t._v("定义一个普通函数作为线程任务。")]),t._v(" "),s("li",[t._v("调用 ThreadPoolExecutor 对象的 submit() 方法来提交线程任务。")]),t._v(" "),s("li",[t._v("当不想提交任何任务时，调用 ThreadPoolExecutor 对象的 shutdown() 方法来关闭线程池。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("from concurrent.futures import ThreadPoolExecutor\nimport threading\nimport time\n\n# 定义一个准备作为线程任务的函数\ndef action(max):\n    my_sum = 0\n    for i in range(max):\n        print(threading.current_thread().name + '  ' + str(i))\n        my_sum += i\n    return my_sum\n# 创建一个包含2条线程的线程池\npool = ThreadPoolExecutor(max_workers=2)\n# 向线程池提交一个task, 50会作为action()函数的参数\nfuture1 = pool.submit(action, 50)\n# 向线程池再提交一个task, 100会作为action()函数的参数\nfuture2 = pool.submit(action, 100)\n# 判断future1代表的任务是否结束\nprint(future1.done())\ntime.sleep(3)\n# 判断future2代表的任务是否结束\nprint(future2.done())\n# 查看future1代表的任务返回的结果\nprint(future1.result())\n# 查看future2代表的任务返回的结果\nprint(future2.result())\n# 关闭线程池\npool.shutdown()\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"_2-使用线程池实现爬虫的具体实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用线程池实现爬虫的具体实现"}},[t._v("#")]),t._v(" 2.使用线程池实现爬虫的具体实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import time\n\nimport requests\nimport pymysql\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass Baidu(object):\n    def __init__(self):\n        self.db = pymysql.connect(host=\"localhost\", user=\"root\", password=\"root\", db=\"spiders\")\n        self.cursor = self.db.cursor()\n        self.url = 'https://talent.baidu.com/httservice/getPostListNew'\n        self.headers = {\n            'Referer': 'https://talent.baidu.com/jobs/social-list?search=python',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'\n        }\n\n    def get_data(self, page):  # 获取地址和User-Agent\n        data = {\n            'recruitType': 'SOCIAL',\n            'pageSize': 10,\n            'keyWord': '',\n            'curPage': page,\n            'projectType': '',\n        }\n        response = requests.post(url=self.url, headers=self.headers, data=data)\n        return response.json()\n\n    def parse_data(self, response):\n        # print(response)\n        data_list = response[\"data\"]['list']\n        for node in data_list:\n            education = node['education'] if node['education'] else '空'\n\n            name = node['name']\n            serviceCondition = node['serviceCondition']\n            self.save_data(education, name, serviceCondition)\n\n    def create_table(self):\n        # 使用预处理语句创建表\n        sql = '''\n                    CREATE TABLE IF NOT EXISTS baidu(\n                        id int primary key auto_increment not null,\n                        education VARCHAR(255) NOT NULL, \n                        name VARCHAR(255) NOT NULL, \n                        serviceCondition TEXT)\n                    '''\n        try:\n            self.cursor.execute(sql)\n            print(\"CREATE TABLE SUCCESS.\")\n        except Exception as ex:\n            print(f\"CREATE TABLE FAILED,CASE:{ex}\")\n\n\n    def save_data(self,education, name, serviceCondition):\n        # SQL 插入语句\n        sql = 'INSERT INTO baidu(id, education, name, serviceCondition) values(%s, %s, %s, %s)'\n        # 执行 SQL 语句\n        try:\n            self.cursor.execute(sql, (0, education, name, serviceCondition))\n            # 提交到数据库执行\n            self.db.commit()\n            print('数据插入成功...')\n        except Exception as e:\n            print(f'数据插入失败: {e}')\n            # 如果发生错误就回滚\n            self.db.rollback()\n\n    def run(self):\n        self.create_table()\n        with ThreadPoolExecutor(max_workers=5)as pool:\n            for i in range(1, 6):\n                response = pool.submit(self.get_data, i)\n                self.parse_data(response.result())\n\n        # 关闭数据库连接\n        self.db.close()\n\nif __name__ == '__main__':\n    t1 = time.time()\n    baidu = Baidu()\n    baidu.run()\n    print(\"总耗时:\", time.time() - t1)\n")])])]),s("h2",{attrs:{id:"四、多进程爬虫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、多进程爬虫"}},[t._v("#")]),t._v(" 四、多进程爬虫")]),t._v(" "),s("blockquote",[s("p",[t._v("前面这种方式由于GIL全局锁的存在，多线程在python3下可能只是个摆设，对应的解释器执行其中的内容的时候仅仅是顺序执行，此时我们可以考虑多进程的方式实现，思路和多线程相似，只是对应的api不相同。")])]),t._v(" "),s("h3",{attrs:{id:"_1-回顾多进程程的方法使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-回顾多进程程的方法使用"}},[t._v("#")]),t._v(" 1 回顾多进程程的方法使用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("from multiprocessing import Process  #导入模块\nt1 = Process(targe=func,args=(,)) #使用一个进程来执行一个函数\nt1.daemon = True  #设置为守护进程\nt1.start() #此时进程才会启动\n")])])]),s("h3",{attrs:{id:"_2-多进程中队列的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-多进程中队列的使用"}},[t._v("#")]),t._v(" 2 多进程中队列的使用")]),t._v(" "),s("p",[t._v("多进程中使用普通的队列模块会发生阻塞，对应的需要使用"),s("code",[t._v("multiprocessing")]),t._v("提供的"),s("code",[t._v("JoinableQueue")]),t._v("模块，其使用过程和在线程中使用的queue方法相同")]),t._v(" "),s("h3",{attrs:{id:"_3-具体实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-具体实现"}},[t._v("#")]),t._v(" 3 具体实现")]),t._v(" "),s("p",[t._v("具体的实现如下:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\nimport requests\nimport pymongo\nimport time\nfrom multiprocessing import Process\nfrom multiprocessing import JoinableQueue as Queue\n\n\nclient = pymongo.MongoClient(host='127.0.0.1', port=27017)\ncollection = client['spider']['aqy']\n\nclass Aqiyi():\n    def __init__(self):\n\n        self.headers = {\n            'referer': 'https://list.iqiyi.com/www/2/15-------------11-1-1-iqiyi--.html?s_source=PCW_SC',\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36',\n            'x-requested-with': 'XMLHttpRequest'\n        }\n        self.url = 'https://pcw-api.iqiyi.com/search/recommend/list?channel_id=2&data_type=1&mode=11&page_id={}&ret_num=48&session=85dd981b69cead4b60f6d980438a5664&three_category_id=15;must'\n        self.url_queue = Queue()\n        self.json_queue = Queue()\n        self.content_list_queue = Queue()\n\n    def get_url(self):\n        for i in range(1, 10):\n            self.url_queue.put(self.url.format(i))\n\n\n    def get_data(self):\n        while True:\n            url = self.url_queue.get()\n            # print(url)\n            response = requests.get(url, headers=self.headers)\n            self.json_queue.put(response.json())\n            self.url_queue.task_done()\n\n    def parse_data(self):\n        while True:\n            data = self.json_queue.get()\n            # print(data)\n            categoryVideos = data['data']['list']\n            for video in categoryVideos:\n                item = {}\n                item['title'] = video['title']\n                item['playUrl'] = video['playUrl']\n                item['description'] = video['description']\n                self.content_list_queue.put(item)\n            self.json_queue.task_done()\n\n    def save_data(self):\n\n        while True:\n            item = self.content_list_queue.get()\n            print(item)\n            collection.insert_one(item)\n            self.content_list_queue.task_done()\n\n    def main(self):\n        process_list = []\n        # 1. url_list\n        t_url = Process(target=self.get_url)\n        process_list.append(t_url)\n        # 2. 遍历，发送请求\n        for i in range(5):  # 创建5个子进程\n            t_parse = Process(target=self.get_data)\n            process_list.append(t_parse)\n        # 3. 提取数据\n        t_content = Process(target=self.parse_data)\n        process_list.append(t_content)\n        # 4. 保存\n        for i in range(3):\n            t_save = Process(target=self.save_data)\n            process_list.append(t_save)\n        for t in process_list:\n            # print(t)\n            t.daemon = True  # 把进程设置为守护线程，主进程结束，子进程结束\n            t.start()\n            time.sleep(0.2)\n\n        for q in [self.url_queue, self.json_queue, self.content_list_queue]:\n            print(q)\n            q.join()  # 让主线程阻塞，等待队列的计数为0，\n\n\n        print(\"主进程结束\")\n\nif __name__ == '__main__':\n    t1 = time.time()\n    yk = Aqiyi()\n    yk.main()\n    print(\"total cost:\", time.time() - t1)\n")])])]),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("上述多进程实现的代码中，multiprocessing提供的JoinableQueue可以创建可连接的共享进程队列。和普通的Queue对象一样，队列允许项目的使用者通知生产者项目已经被成功处理。通知进程是使用共享的信号和条件变量来实现的。 对应的该队列能够和普通队列一样能够调用task_done和join方法\n")])])]),s("p",[t._v("初始化mongo可能会引起：TypeError: cannot pickle '_thread.lock' object")]),t._v(" "),s("h2",{attrs:{id:"五、异步协程爬虫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、异步协程爬虫"}},[t._v("#")]),t._v(" 五、异步协程爬虫")]),t._v(" "),s("p",[t._v("我们知道爬虫是 IO 密集型任务，比如如果我们使用 requests 库来爬取某个站点的话，发出一个请求之后，程序必须要等待网站返回响应之后才能接着运行，而在等待响应的过程中，整个爬虫程序是一直在等待的，实际上没有做任何的事情。对于这种情况我们有没有优化方案呢？")]),t._v(" "),s("h3",{attrs:{id:"_1-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[t._v("#")]),t._v(" 1.基本概念")]),t._v(" "),s("p",[s("strong",[t._v("异步")])]),t._v(" "),s("p",[t._v("为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。")]),t._v(" "),s("p",[t._v("例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。")]),t._v(" "),s("p",[s("strong",[t._v("同步")])]),t._v(" "),s("p",[t._v("不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。")]),t._v(" "),s("p",[s("strong",[t._v("阻塞")])]),t._v(" "),s("p",[t._v("阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。")]),t._v(" "),s("p",[s("strong",[t._v("非阻塞")])]),t._v(" "),s("p",[t._v("程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的。")]),t._v(" "),s("p",[t._v("同步/异步关注的是消息通信机制 (synchronous communication/ asynchronouscommunication) 。")]),t._v(" "),s("p",[t._v("阻塞/非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.")]),t._v(" "),s("h3",{attrs:{id:"_2-协程异步实现方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-协程异步实现方法"}},[t._v("#")]),t._v(" 2.协程异步实现方法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("pip install aiohttp\n")])])]),s("p",[t._v("aiohttp是一个为Python提供异步HTTP 客户端/服务端编程，基于asyncio(Python用于支持异步编程的标准库)的异步库。asyncio可以实现单线程并发IO操作，其实现了TCP、UDP、SSL等协议，aiohttp就是基于asyncio实现的http框架。")]),t._v(" "),s("p",[t._v("async 用来声明一个函数为异步函数")]),t._v(" "),s("p",[t._v("await 用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序")]),t._v(" "),s("h3",{attrs:{id:"_2-1-aiohttp的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-aiohttp的使用"}},[t._v("#")]),t._v(" 2.1 aiohttp的使用")]),t._v(" "),s("ul",[s("li",[t._v("使用方式和requests基本保持一致")]),t._v(" "),s("li",[t._v("requests使用代理是proxies，aiohttp是proxy")]),t._v(" "),s("li",[t._v("aiohttp获取进制数据是read()")]),t._v(" "),s("li",[t._v("文档："),s("a",{attrs:{href:"https://aiohttp.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://aiohttp.readthedocs.io/"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"_3-同步异步对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-同步异步对比"}},[t._v("#")]),t._v(" 3.同步异步对比")]),t._v(" "),s("p",[s("strong",[t._v("同步")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import time\nimport requests\ndef main():\n    for i in range(30):\n        res = requests.get('https://www.baidu.com')\n        print(f'第{i + 1}次请求，status_code = {res.status_code}')\n\nif __name__ == '__main__':\n    start = time.time()\n    main()\n    end = time.time()\n    print(f'同步发送30次请求，耗时：{end - start}')\n")])])]),s("p",[s("strong",[t._v("异步")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import asyncio\nimport aiohttp\n\n\nasync def requests_data(client,i):\n    res = await client.get('https://www.baidu.com')\n    print(f'第{i + 1}次请求，status_code = {res.status}')\n    # await asyncio.sleep(1)\n    return res\n\n\nasync def main():\n    # 生明一个异步的上下文管理器，能帮助我们自己的分配和释放资源\n    # aiohttp.ClientSession()   类似requests的sessi()\n    async with aiohttp.ClientSession() as client:\n        task_list = []\n        for i in range(30):\n            # 获取到协程对象\n            res = requests_data(client, i)\n            # 创建task对象\n            task = asyncio.create_task(res)\n            task_list.append(task)\n            # 直接执行异步对象任务，会阻塞\n            # await requests_data(client, i)\n        # 等待执行的异步 将task对象交有event_loop来控制\n        done, pending = await asyncio.wait(task_list)\n        print(done, pending)\n        for item in done:\n            print(item.result())\n\n\n\n\nif __name__ == '__main__':\n    start = time.time()\n    # 开启事件循环对象\n    loop = asyncio.get_event_loop()\n    # 用事件循环对象开启协程异步对象\n    loop.run_until_complete(main())\n    end = time.time()\n    print(f'同步发送30次请求，耗时：{end - start}')\n\n")])])]),s("h3",{attrs:{id:"_4-异步爬虫实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-异步爬虫实战"}},[t._v("#")]),t._v(" 4.异步爬虫实战")]),t._v(" "),s("p",[s("strong",[t._v("需求：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("采集王者荣耀官网里面所有的图片信息\n\n网址：https://pvp.qq.com/web201605/herolist.shtml\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n# @File  :   异步图片爬虫案列.py\n# Author :   柏汌\nimport os\n\nimport requests\nimport asyncio  # asyncio是Python3.4引入的一个标准库，直接内置了对异步IO的支持。asyncio模块提供了使用协程构建并发应用的工具\nimport aiohttp  # 异步请求库aiohttp 加快图片 url 的网页请求\nimport time\n\nclass Crawl_Image:\n    def __init__(self):\n        self.skin_url = 'https://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/{}/{}-bigskin-{}.jpg'\n        self.url = 'https://pvp.qq.com/web201605/js/herolist.json'\n        self.headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',\n        }\n\n    async def download_image(self, session, ename, cname):\n        for i in range(1, 10):\n            response = await session.get(self.skin_url.format(ename, ename, i), headers=self.headers)\n            # status获取到状态码\n            if response.status == 200:\n                # read 获取到进制数据\n                content = await response.read()\n                with open(\"图片/\" + cname + \"-\" + str(i) + '.jpg', 'wb') as f:\n                    f.write(content)\n                print('下载{}第{}张图片成功'.format(cname, str(i)))\n            else:\n                break\n\n\n    async def run(self):\n\n        async with aiohttp.ClientSession() as session:\n            response = await session.get(self.url, headers=self.headers)\n            wzry_data = await response.json(content_type=None)\n            tasks = []\n            for i in wzry_data:\n                ename = i['ename']\n                cname = i['cname']\n                # 获取协程对象\n                res = self.download_image(session, ename, cname)\n                # 将协程对象转换成task对象 才能做到异步\n                task = asyncio.create_task(res)\n                tasks.append(task)\n            # 等待执行的异步 将task对象交由event_loop来控制\n            await asyncio.wait(tasks)\n\n\nif __name__ == '__main__':\n    if not os.path.exists('图片'):\n        os.mkdir('图片')\n    start = time.time()\n    crawl_image = Crawl_Image()\n    # 获取事件循环 Eventloop 我们想运用协程，首先要生成一个loop对象，然后loop.run_xxx()就可以运行协程了，而如何创建这个loop, 方法有两种：对于主线程是loop=get_event_loop().\n    loop = asyncio.get_event_loop()\n    # 执行协程\n    loop.run_until_complete(crawl_image.run())\n    print('运行时间{}'.format(time.time() - start))\n")])])]),s("h3",{attrs:{id:"_4-1-aiomysql使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-aiomysql使用"}},[t._v("#")]),t._v(" 4.1 aiomysql使用")]),t._v(" "),s("p",[s("strong",[t._v("安装：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("pip3 install aiomysql\n")])])]),s("p",[t._v("利用python3中新加入的异步关键词 async/await , 我们使用各种异步操作为来执行各种异步的操作，如使用 aiohttp 来代替 requests 来执行异步的网络请求操作，使用 motor 来代替同步的 pymongo 库来操作mongo数据库，同样，我们在开发同步的python程序时，我们会使用PyMySQL来操作mysql数据库，同样，我们会使用aiomysql来异步操作mysql 数据库。\n"),s("strong",[t._v("使用方式：")])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" asyncio\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" aiomysql\n\nloop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    conn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" aiomysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                       user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" db"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'spiders'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                       loop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT * from tx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fetchall"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nloop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run_until_complete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test_example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("需求：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("通过异步的方式获取到Scrape | Book里面30个页的书籍信息\n\n网址：https://spa5.scrape.center/page/3\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" random\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" aiohttp\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" asyncio\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" aiomysql\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scrape_spider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://spa5.scrape.center/api/book/?limit=18&offset={}'")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'User-Agent'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" page"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        response "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(response.r)")]),t._v("\n        json_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" json_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'results'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'authors'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'authors'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'score'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'score'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(item)")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# time.sleep(1)")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("save_data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sql插入语法")]),t._v("\n        sql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'INSERT INTO books(id, authors, title, score) values(%s, %s, %s, %s)'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# print(sql, (0, item['authors'], item['title'], item['score']))")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'authors'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'title'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'score'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交到数据库执行")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'数据插入成功...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" Exception "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'数据插入失败: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果发生错误就回滚")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rollback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\n        # 异步创建连接池\n        pool = await aiomysql.create_pool(host='127.0.0.1', port=3306, user='root', password='root', db='spiders',\n                                          minsize=1, maxsize=2, loop=loop)\n        # 连接mysql\n        async with pool.acquire() as conn:\n            # 创建游标\n            async with conn.cursor() as cursor:\n\n        :return:\n        \"\"\"")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 异步创建连接池")]),t._v("\n        conn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" aiomysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" db"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'spiders'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                          loop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        cursor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用预处理语句创建表")]),t._v("\n        create_sql "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("'''\n                    CREATE TABLE IF NOT EXISTS books(\n                        id int primary key auto_increment not null,\n                        authors VARCHAR(255) NOT NULL, \n                        title VARCHAR(255) NOT NULL, \n                        score VARCHAR(255) NOT NULL\n                        );\n                    '''")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行sql")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("create_sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" aiohttp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ClientSession"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            tasks "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                task "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wait"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" cursor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    crawl_book "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Scrape_spider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取事件循环 Eventloop 我们想运用协程，首先要生成一个loop对象，然后loop.run_xxx()就可以运行协程了，而如何创建这个loop, 方法有两种：对于主线程是loop=get_event_loop().")]),t._v("\n    loop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" asyncio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_event_loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行协程")]),t._v("\n    loop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run_until_complete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("crawl_book"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'运行时间{}'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"六、课后作业"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、课后作业"}},[t._v("#")]),t._v(" 六、课后作业")]),t._v(" "),s("p",[t._v("要求：通过异步的方式获取到英雄联盟官网的英雄皮肤图片")]),t._v(" "),s("p",[t._v("网址：https://101.qq.com/#/hero")])])}),[],!1,null,null,null);s.default=e.exports}}]);