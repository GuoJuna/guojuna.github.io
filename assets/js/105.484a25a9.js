(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{580:function(a,t,s){"use strict";s.r(t);var r=s(0),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"springcloud-alibaba"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-alibaba"}},[a._v("#")]),a._v(" SpringCloud Alibaba")]),a._v(" "),t("h4",{attrs:{id:"springcloud-alibaba-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-alibaba-简介"}},[a._v("#")]),a._v(" SpringCloud Alibaba 简介")]),a._v(" "),t("p",[a._v("Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用\n微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布\n式应用服务。\n依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用\n接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。\nhttps://github.com/alibaba/spring-cloud-alibaba")]),a._v(" "),t("h4",{attrs:{id:"为什么使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用"}},[a._v("#")]),a._v(" 为什么使用?")]),a._v(" "),t("p",[t("strong",[a._v("SpringCloud 的几大痛点")])]),a._v(" "),t("p",[a._v("SpringCloud 部分组件停止维护和更新，给开发带来不便；")]),a._v(" "),t("p",[a._v("SpringCloud 部分环境搭建复杂，没有完善的可视化界面，我们需要大量的二次开发和定制")]),a._v(" "),t("p",[a._v("SpringCloud 配置复杂，难以上手，部分配置差别难以区分和合理应用")]),a._v(" "),t("p",[t("strong",[a._v("SpringCloud Alibaba 的优势")]),a._v("：")]),a._v(" "),t("p",[a._v("阿里使用过的组件经历了考验，性能强悍，设计合理，现在开源出来大家用\n成套的产品搭配完善的可视化界面给开发运维带来极大的便利\n搭建简单，学习曲线低。")]),a._v(" "),t("p",[a._v("结合 SpringCloud Alibaba 我们最终的技术搭配方案：")]),a._v(" "),t("ul",[t("li",[a._v("SpringCloud Alibaba - Nacos：注册中心（服务发现/注册")]),a._v(" "),t("li",[a._v("SpringCloud Alibaba - Nacos：配置中心（动态配置管理）")]),a._v(" "),t("li",[a._v("SpringCloud - Ribbon：负载均衡")]),a._v(" "),t("li",[a._v("SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）")]),a._v(" "),t("li",[a._v("SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断）")]),a._v(" "),t("li",[a._v("SpringCloud - Gateway：API 网关（webflux 编程模式）")]),a._v(" "),t("li",[a._v("SpringCloud - Sleuth：调用链监控")]),a._v(" "),t("li",[a._v("SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案")])]),a._v(" "),t("h4",{attrs:{id:"项目中的依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目中的依赖"}},[a._v("#")]),a._v(" 项目中的依赖")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependencyManagement"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependencies"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("alibaba"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("cloud"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("groupId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cloud"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("alibaba"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("dependencies"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("artifactId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.2")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v(".5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("RELEASE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("version"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("pom"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("type"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("scope"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("scope"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dependency"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dependencies"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dependencyManagement"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("h2",{attrs:{id:"nacos-作为注册中心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nacos-作为注册中心"}},[a._v("#")]),a._v(" Nacos[作为注册中心]")]),a._v(" "),t("p",[a._v("Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理\n平台。他是使用 java 编写。需要依赖 java 环境\nNacos 文档地址： https://nacos.io/zh-cn/docs/quick-start.html")]),a._v(" "),t("h4",{attrs:{id:"下载-nacos-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载-nacos-server"}},[a._v("#")]),a._v(" 下载 nacos-server")]),a._v(" "),t("p",[a._v("https://github.com/alibaba/nacos/releases")]),a._v(" "),t("h4",{attrs:{id:"启动-nacos-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-nacos-server"}},[a._v("#")]),a._v(" 启动 nacos-server")]),a._v(" "),t("ul",[t("li",[a._v("双击 bin 中的 startup.cmd 文件")]),a._v(" "),t("li",[a._v("访问 http://localhost:8848/nacos/")]),a._v(" "),t("li",[a._v("使用默认的 nacos/nacos 进行登录")])]),a._v(" "),t("h4",{attrs:{id:"将微服务注册到-nacos-中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将微服务注册到-nacos-中"}},[a._v("#")]),a._v(" 将微服务注册到 nacos 中")]),a._v(" "),t("ol",[t("li",[a._v("首先，修改 pom.xml 文件，引入 Nacos Discovery Starter。")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("alibaba"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("cloud"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("groupId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cloud"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("starter"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("alibaba"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("nacos"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("discovery"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("artifactId"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dependency"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("、在应用的 /src/main/resources/application.properties 配置文件中配置 Nacos Server 地址")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("spring"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("cloud"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("nacos"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("discovery"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("server"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("addr"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8848")]),a._v("\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[a._v("使用@EnableDiscoveryClient 开启服务注册发现功能")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@SpringBootApplication")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@EnableDiscoveryClient")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ProviderApplication")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SpringApplication")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Application")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("启动应用，观察 nacos 服务列表是否已经注册上服务")])]),a._v(" "),t("blockquote",[t("p",[a._v("注意：每一个应用都应该有名字，这样才能注册上去。修改 application.properties 文件\nspring.application.name=service-provider\nserver.port=8000")])]),a._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[a._v("注册更多服务上去，测试使用 feign 远程调用")])]),a._v(" "),t("p",[a._v("Nacos 使用三步")]),a._v(" "),t("ol",[t("li",[a._v("导包 nacos-discovery")]),a._v(" "),t("li",[a._v("写配置，指定 nacos 地址，指定应用的名字")]),a._v(" "),t("li",[a._v("开启服务注册发现功能@EnableDiscoveryClient")])]),a._v(" "),t("p",[a._v("Feign 使用三步")]),a._v(" "),t("ol",[t("li",[a._v("导包 openfeign")]),a._v(" "),t("li",[a._v("开启@EnableFeignClients 功能")]),a._v(" "),t("li",[a._v("编写接口，进行远程调用")])]),a._v(" "),t("h4",{attrs:{id:"更多配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更多配置"}},[a._v("#")]),a._v(" 更多配置")]),a._v(" "),t("p",[a._v("https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/na\ncos-example/nacos-discovery-example/readme-zh.md#more")]),a._v(" "),t("h2",{attrs:{id:"nacos-作为配置中心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nacos-作为配置中心"}},[a._v("#")]),a._v(" Nacos[作为配置中心]")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("pom.xml 引入 Nacos Config Starter。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<dependency>\n\t<groupId>com.alibaba.cloud</groupId>\n\t<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n")])])])]),a._v(" "),t("li",[t("p",[a._v("在应用的 /src/main/resources/bootstrap.properties 配 置文件中配置 Nacos Config 元数据")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("spring.application.name=nacos-config-example\nspring.cloud.nacos.config.server-addr=127.0.0.1:8848\n")])])])]),a._v(" "),t("li",[t("p",[a._v("在 nacos 中添加配置")]),a._v(" "),t("p",[a._v("在 nacos 中创建一个 应用名.properties 配置文件并编写配置")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Nacos Config 数据结构\nNacos Config 主要通过 dataId 和 group 来唯一确定一条配置。\nNacos Client 从 Nacos Server 端获取数据时，调用的是此接口 ConfigService.getConfig(String dataId, String group, long timeoutMs)。\n")])])])]),a._v(" "),t("li",[t("p",[a._v("在应用中使用@Value 和@RefreshScope")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('完成上述两步后，应用会从 Nacos Config 中获取相应的配置，并添加在 Spring Environment\n的 PropertySources 中 。 这 里 我 们 使 用 @Value 注 解 来 将 对 应 的 配 置 注 入 到\nSampleController 的 userName 和 age 字段，并添加 @RefreshScope 打开动态刷新功能\n\n@RefreshScope\nclass SampleController {\n\n\t@Value("${user.name}")\n\tString userName;\n\t@Value("${user.age}")\n\tint age;\n}\n')])])])]),a._v(" "),t("li",[t("p",[a._v("进阶")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("核心概念")]),a._v(" "),t("p",[t("strong",[a._v("命名空间")]),a._v("：")]),a._v(" "),t("p",[a._v("​\t用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的 配置。")]),a._v(" "),t("p",[t("strong",[a._v("配置集")]),a._v("：")]),a._v(" "),t("p",[a._v("​\t一组相关或者不相关的配置项的集合称为配置集。")]),a._v(" "),t("p",[t("strong",[a._v("配置集 ID")]),a._v("：")]),a._v(" "),t("p",[a._v("​\tNacos 中的某个配置集的 ID(Data ID)")]),a._v(" "),t("p",[t("strong",[a._v("配置分组")]),a._v("：")]),a._v(" "),t("p",[a._v("​\t所有配置分组的名称默认采用 DEFAULT_GROUP")]),a._v(" "),t("p",[a._v("​\tNacos 中的一组配置集，是组织配置的维度之一")])]),a._v(" "),t("li",[t("p",[a._v("原理")]),a._v(" "),t("p",[t("strong",[a._v("自动注入")]),a._v("： NacosConfigStarter 实现了 org.springframework.cloud.bootstrap.config.PropertySourceLocator 接口，并将优先级设置成了最高。 在 Spring Cloud 应用启动阶段，会主动从 Nacos Server 端获取对应的数据，并将获取到的 数据转换成 PropertySource 且注入到 Environment 的 PropertySources 属性中，所以使用 @Value 注解也能直接获取 Nacos Server 端配置的内容。")]),a._v(" "),t("p",[t("strong",[a._v("动态刷新")]),a._v("： Nacos Config Starter 默认为所有获取数据成功的 Nacos 的配置项添加了监听功能，在监听 到服务端配置发生变化时会实时触发 org.springframework.cloud.context.refresh.ContextRefresher 的 refresh 方法 。 如果需要对 Bean 进行动态刷新，请参照 Spring 和 Spring Cloud 规范。推荐给类添加 @RefreshScope 或 @ConfigurationProperties 注解，")])]),a._v(" "),t("li",[t("p",[a._v("加载多配置文件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("spring.cloud.nacos.config.server-addr=127.0.0.1:8848\nspring.cloud.nacos.config.namespace=31098de9-fa28-41c9-b0bd-c754ce319ed4\nspring.cloud.nacos.config.ext-config[0].data-id=gulimall-datasource.yml\nspring.cloud.nacos.config.ext-config[0].refresh=false\nspring.cloud.nacos.config.ext-config[0].group=dev\n")])])])]),a._v(" "),t("li",[t("p",[a._v("namespace 与 group 最佳实践")]),a._v(" "),t("p",[a._v("每个微服务创建自己的 namespace 进行隔离，group 来区分 dev，beta，prod 等环境")])])])])]),a._v(" "),t("h2",{attrs:{id:"gateway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gateway"}},[a._v("#")]),a._v(" Gateway")]),a._v(" "),t("h4",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),t("p",[a._v("网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等。而 springcloud gateway 作为 SpringCloud 官方推出的第二代网关框架，取代了 Zuul 网关。")]),a._v(" "),t("p",[a._v("网关提供 API 全托管服务，丰富的 API 管理功能，辅助企业管理大规模的 API，以降低管理 成本和安全风险，包括协议适配、协议转发、安全策略、防刷、流量、监控日志等功能。")]),a._v(" "),t("p",[a._v("Spring Cloud Gateway 旨在提供一种简单而有效的方式来对 API 进行路由，并为他们提供切 面，例如：安全性，监控/指标 和弹性等。")]),a._v(" "),t("p",[a._v("Spring Cloud Gateway 特点:")]),a._v(" "),t("ul",[t("li",[a._v("基于 Spring5，支持响应式编程和 SpringBoot2.0")]),a._v(" "),t("li",[a._v("支持使用任何请求属性进行路由匹配")]),a._v(" "),t("li",[a._v("特定于路由的断言和过滤器")]),a._v(" "),t("li",[a._v("集成 Hystrix 进行断路保护")]),a._v(" "),t("li",[a._v("集成服务发现功能")]),a._v(" "),t("li",[a._v("易于编写 Predicates 和 Filters")]),a._v(" "),t("li",[a._v("支持请求速率限制")]),a._v(" "),t("li",[a._v("支持路径重写")])]),a._v(" "),t("h4",{attrs:{id:"为什么使用-api-网关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-api-网关"}},[a._v("#")]),a._v(" 为什么使用 API 网关？")]),a._v(" "),t("ul",[t("li",[a._v("客户端会多次请求不同的微服务，增加了客户端的复杂性。")]),a._v(" "),t("li",[a._v("存在跨域请求，在一定场景下处理相对复杂。")]),a._v(" "),t("li",[a._v("认证复杂，每个服务都需要独立认证。")]),a._v(" "),t("li",[a._v("难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合 并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将 会很难实施。")]),a._v(" "),t("li",[a._v("某些微服务可能使用了防火墙 / 浏览器不友好的协议，直接访问会有一定的困难")])]),a._v(" "),t("h4",{attrs:{id:"使用-api-网关后的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-api-网关后的优点"}},[a._v("#")]),a._v(" 使用 API 网关后的优点")]),a._v(" "),t("ul",[t("li",[a._v("易于监控。可以在网关收集监控数据并将其推送到外部系统进行分析。")]),a._v(" "),t("li",[a._v("易于认证。可以在网关上进行认证，然后再将请求转发到后端的微服务，而无须在 每个微服务中进行认证。")]),a._v(" "),t("li",[a._v("减少了客户端与各个微服务之间的交互次数")])]),a._v(" "),t("h4",{attrs:{id:"核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[a._v("#")]),a._v(" 核心概念")]),a._v(" "),t("ul",[t("li",[a._v("路由。路由是网关最基础的部分，路由信息有一个 ID、一个目的 URL、一组断言和一组 Filter 组成。如果断言路由为真，则说明请求的 URL 和配置匹配")]),a._v(" "),t("li",[a._v("断言。Java8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是 Spring5.0 框 架中的 ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配 来自于 http request 中的任何信息，比如请求头和参数等。")]),a._v(" "),t("li",[a._v("过滤器。一个标准的 Spring webFilter。Spring cloud gateway 中的 filter 分为两种类型的 Filter，分别是 Gateway Filter 和 Global Filter。过滤器 Filter 将会对请求和响应进行修改 处理")])]),a._v(" "),t("p",[a._v("工作原理：")]),a._v(" "),t("blockquote",[t("p",[a._v("客户端发送请求给网关，弯管 HandlerMapping 判断是否请求满足某个路由，满足就发给网 关的 WebHandler。这个 WebHandler 将请求交给一个过滤器链，请求到达目标服务之前，会 执行所有过滤器的 pre 方法。请求到达目标服务处理之后再依次执行所有过滤器的 post 方 法。")])]),a._v(" "),t("blockquote",[t("p",[a._v("一句话：满足某些断言（predicates）就路由到指定的地址（uri），使用指定的过滤器（filter）")])]),a._v(" "),t("h4",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("创建网关项目，引入网关")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n")])])])]),a._v(" "),t("li",[t("p",[a._v("编写网关配置文件")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("spring")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("cloud")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("gateway")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("routes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" add_request_parameter_route\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("uri")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" https"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//example.org\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("predicates")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" Query=baz\n          "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("filters")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" \n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" AddRequestParameter=foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" bar\n")])])])]),a._v(" "),t("li",[t("p",[a._v("注意")]),a._v(" "),t("ul",[t("li",[a._v("各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路 由匹配。")]),a._v(" "),t("li",[a._v("一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);