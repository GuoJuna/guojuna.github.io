(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{522:function(t,s,n){"use strict";n.r(s);var a=n(0),r=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"python3-的基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python3-的基本数据类型"}},[t._v("#")]),t._v(" python3 的基本数据类型")]),t._v(" "),s("p",[t._v("Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。")]),t._v(" "),s("p",[t._v('在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。')]),t._v(" "),s("p",[t._v("等号（=）用来给变量赋值。")]),t._v(" "),s("p",[t._v("等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/usr/bin/python3\n\ncounter = 100          # 整型变量\nmiles   = 1000.0       # 浮点型变量\nname    = "runoob"     # 字符串\n\nprint (counter)\nprint (miles)\nprint (name)\n')])])]),s("h2",{attrs:{id:"标准数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准数据类型"}},[t._v("#")]),t._v(" 标准数据类型")]),t._v(" "),s("p",[t._v("Python3 中有六个标准的数据类型：")]),t._v(" "),s("ul",[s("li",[t._v("Number（数字）")]),t._v(" "),s("li",[t._v("String（字符串）")]),t._v(" "),s("li",[t._v("List（列表）")]),t._v(" "),s("li",[t._v("Tuple（元组）")]),t._v(" "),s("li",[t._v("Set（集合）")]),t._v(" "),s("li",[t._v("Dictionary（字典）")])]),t._v(" "),s("p",[t._v("Python3 的六个标准数据类型中：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("不可变数据")]),t._v("（3 个）：Number（数字）、String（字符串）、Tuple（元组）；")]),t._v(" "),s("li",[s("strong",[t._v("可变数据")]),t._v("（3 个）：List（列表）、Dictionary（字典）、Set（集合）。")])]),t._v(" "),s("h2",{attrs:{id:"number-数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-数字"}},[t._v("#")]),t._v(" Number（数字）")]),t._v(" "),s("p",[t._v("Python3 支持 "),s("strong",[t._v("int、float、bool、complex（复数）")]),t._v("。")]),t._v(" "),s("p",[t._v("在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。")]),t._v(" "),s("p",[t._v("像大多数语言一样，数值类型的赋值和计算都是很直观的。")]),t._v(" "),s("p",[t._v("内置的 type() 函数可以用来查询变量所指的对象类型。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(">>> a, b, c, d = 20, 5.5, True, 4+3j\n>>> print(type(a), type(b), type(c), type(d))\n<class 'int'> <class 'float'> <class 'bool'> <class 'complex'>\n")])])]),s("p",[t._v("isinstance 和 type 的区别在于：")]),t._v(" "),s("ul",[s("li",[t._v("type()不会认为子类是一种父类类型。")]),t._v(" "),s("li",[t._v("isinstance()会认为子类是一种父类类型。")])]),t._v(" "),s("p",[t._v("**注意：**在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。")]),t._v(" "),s("h4",{attrs:{id:"数值运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值运算"}},[t._v("#")]),t._v(" 数值运算")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(">>> 5 + 4  # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方\n32\n")])])]),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("1、Python可以同时为多个变量赋值，如a, b = 1, 2。")]),t._v(" "),s("li",[t._v("2、一个变量可以通过赋值指向不同类型的对象。")]),t._v(" "),s("li",[t._v("3、数值的除法包含两个运算符："),s("strong",[t._v("/")]),t._v(" 返回一个浮点数，"),s("strong",[t._v("//")]),t._v(" 返回一个整数。")]),t._v(" "),s("li",[t._v("4、在混合计算时，Python会把整型转换成为浮点数。")])]),t._v(" "),s("h2",{attrs:{id:"string-字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串"}},[t._v("#")]),t._v(" String（字符串）")]),t._v(" "),s("p",[t._v("Python中的字符串用单引号 "),s("strong",[t._v("'")]),t._v(" 或双引号 "),s("strong",[t._v('"')]),t._v(" 括起来，同时使用反斜杠 *"),s("em",[t._v("*")]),t._v(" 转义特殊字符。")]),t._v(" "),s("p",[t._v("字符串的截取的语法格式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("变量[头下标:尾下标]\n")])])]),s("p",[t._v("加号 "),s("strong",[t._v("+")]),t._v(" 是字符串的连接符， 星号 ***** 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/python3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Runoob'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出字符串")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出第一个到倒数第二个的所有字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出字符串第一个字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出从第三个开始到第五个的字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出从第三个开始的后的所有字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出字符串两次，也可以写成 print (2 * str)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TEST"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接字符串")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("Runoob\nRunoo\nR\nnoo\nnoob\nRunoobRunoob\nRunoobTEST\n")])])]),s("p",[t._v("Python 使用反斜杠 \\ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 "),s("strong",[t._v("r")]),t._v(", 代表raw string，表示原始字符串：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ru\\noob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nRu\noob\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("r'Ru\\noob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nRu\\noob\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 "),s("strong",[t._v('"""..."""')]),t._v(" 或者 "),s("strong",[t._v("'''...'''")]),t._v(" 跨越多行。")]),t._v(" "),s("p",[t._v("注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。")]),t._v(" "),s("p",[t._v("与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。")]),t._v(" "),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。")]),t._v(" "),s("li",[t._v("2、字符串可以用+运算符连接在一起，用*运算符重复。")]),t._v(" "),s("li",[t._v("3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。")]),t._v(" "),s("li",[t._v("4、Python中的字符串不能改变。")])]),t._v(" "),s("h2",{attrs:{id:"list-列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-列表"}},[t._v("#")]),t._v(" List（列表）")]),t._v(" "),s("p",[t._v("List（列表） 是 Python 中使用最频繁的数据类型。")]),t._v(" "),s("p",[t._v("列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。")]),t._v(" "),s("p",[t._v("列表是写在方括号 "),s("strong",[t._v("[]")]),t._v(" 之间、用逗号分隔开的元素列表。")]),t._v(" "),s("p",[t._v("和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。")]),t._v(" "),s("p",[t._v("列表截取的语法格式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("变量[头下标:尾下标]\n")])])]),s("p",[t._v("索引值以 "),s("strong",[t._v("0")]),t._v(" 为开始值，"),s("strong",[t._v("-1")]),t._v(" 为从末尾的开始位置。")]),t._v(" "),s("p",[t._v("加号 "),s("strong",[t._v("+")]),t._v(" 是列表连接运算符，星号 ***** 是重复操作。如下实例：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/python3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("786")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70.2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ntinylist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出完整列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出列表第一个元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从第二个开始输出到第三个元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出从第三个元素开始的所有元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tinylist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出两次列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" tinylist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接列表")]),t._v("\n")])])]),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("786")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nabcd\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("786")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcd'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("786")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("与Python字符串不一样的是，列表中的元素是可以改变的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(">>> a = [1, 2, 3, 4, 5, 6]\n>>> a[0] = 9\n>>> a[2:5] = [13, 14, 15]\n>>> a\n[9, 2, 13, 14, 15, 6]\n>>> a[2:5] = []   # 将对应的元素值设置为 []\n>>> a\n[9, 2, 6]\n")])])]),s("p",[t._v("List 内置了有很多方法，例如 append()、pop() 等等，")]),t._v(" "),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("1、List写在方括号之间，元素用逗号隔开。")]),t._v(" "),s("li",[t._v("2、和字符串一样，list可以被索引和切片。")]),t._v(" "),s("li",[t._v("3、List可以使用+操作符进行拼接。")]),t._v(" "),s("li",[t._v("4、List中的元素是可以改变的。")])]),t._v(" "),s("h2",{attrs:{id:"tuple-元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuple-元组"}},[t._v("#")]),t._v(" Tuple（元组）")]),t._v(" "),s("p",[t._v("元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 "),s("strong",[t._v("()")]),t._v(" 里，元素之间用逗号隔开。")]),t._v(" "),s("p",[t._v("元组中的元素类型也可以不相同：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/python3\n\ntuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )\ntinytuple = (123, 'runoob')\n\nprint (tuple)             # 输出完整元组\nprint (tuple[0])          # 输出元组的第一个元素\nprint (tuple[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tuple[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tuple + tinytuple) # 连接元组\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("('abcd', 786, 2.23, 'runoob', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'runoob', 70.2)\n(123, 'runoob', 123, 'runoob')\n('abcd', 786, 2.23, 'runoob', 70.2, 123, 'runoob')\n")])])]),s("p",[t._v("string、list 和 tuple 都属于 sequence（序列）。")]),t._v(" "),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("1、与字符串一样，元组的元素不能修改。")]),t._v(" "),s("li",[t._v("2、元组也可以被索引和切片，方法一样。")]),t._v(" "),s("li",[t._v("3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。")]),t._v(" "),s("li",[t._v("4、元组也可以使用+操作符进行拼接。")])]),t._v(" "),s("h2",{attrs:{id:"set-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[t._v("#")]),t._v(" Set（集合）")]),t._v(" "),s("p",[t._v("集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。")]),t._v(" "),s("p",[t._v("基本功能是进行成员关系测试和删除重复元素。")]),t._v(" "),s("p",[t._v("可以使用大括号 "),s("strong",[t._v("{ }")]),t._v(" 或者 "),s("strong",[t._v("set()")]),t._v(" 函数创建集合，注意：创建一个空集合必须用 "),s("strong",[t._v("set()")]),t._v(" 而不是 "),s("strong",[t._v("{ }")]),t._v("，因为 "),s("strong",[t._v("{ }")]),t._v(" 是用来创建一个空字典。")]),t._v(" "),s("p",[t._v("创建格式：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("parame = {value01,value02,...}\n或者\nset(value)\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/python3\n\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'}\n\nprint(sites)   # 输出集合，重复的元素被自动去掉\n\n# 成员测试\nif 'Runoob' in sites :\n    print('Runoob 在集合中')\nelse :\n    print('Runoob 不在集合中')\n\n\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\n\nprint(a - b)     # a 和 b 的差集\n\nprint(a | b)     # a 和 b 的并集\n\nprint(a & b)     # a 和 b 的交集\n\nprint(a ^ b)     # a 和 b 中不同时存在的元素\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("{'Zhihu', 'Baidu', 'Taobao', 'Runoob', 'Google', 'Facebook'}\nRunoob 在集合中\n{'b', 'c', 'a', 'r', 'd'}\n{'r', 'b', 'd'}\n{'b', 'c', 'a', 'z', 'm', 'r', 'l', 'd'}\n{'c', 'a'}\n{'z', 'b', 'm', 'r', 'l', 'd'}\n")])])]),s("h2",{attrs:{id:"dictionary-字典"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-字典"}},[t._v("#")]),t._v(" Dictionary（字典）")]),t._v(" "),s("p",[t._v("字典（dictionary）是Python中另一个非常有用的内置数据类型。")]),t._v(" "),s("p",[t._v("列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。")]),t._v(" "),s("p",[t._v("字典是一种映射类型，字典用 "),s("strong",[t._v("{ }")]),t._v(" 标识，它是一个无序的 "),s("strong",[t._v("键(key) : 值(value)")]),t._v(" 的集合。")]),t._v(" "),s("p",[t._v("键(key)必须使用不可变类型。")]),t._v(" "),s("p",[t._v("在同一个字典中，键(key)必须是唯一的。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/usr/bin/python3\n\ndict = {}\ndict['one'] = \"1 - 菜鸟教程\"\ndict[2]     = \"2 - 菜鸟工具\"\n\ntinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\n\n\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 - 菜鸟教程\n2 - 菜鸟工具\n{'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'}\ndict_keys(['name', 'code', 'site'])\ndict_values(['runoob', 1, 'www.runoob.com'])\n")])])]),s("p",[t._v("构造函数 dict() 可以直接从键值对序列中构建字典如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(">>> dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n>>> dict(Runoob=1, Google=2, Taobao=3)\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n>>>\n")])])]),s("p",[t._v("另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。")]),t._v(" "),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("1、字典是一种映射类型，它的元素是键值对。")]),t._v(" "),s("li",[t._v("2、字典的关键字必须为不可变类型，且不能重复。")]),t._v(" "),s("li",[t._v("3、创建空字典使用 "),s("strong",[t._v("{ }")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"python数据类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python数据类型转换"}},[t._v("#")]),t._v(" Python数据类型转换")]),t._v(" "),s("p",[t._v("有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。")]),t._v(" "),s("p",[t._v("以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gj-blog.oss-cn-hangzhou.aliyuncs.com/blog-img/2020/11/20201118205302.png",alt:"image-20201118205302437"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);